#!/usr/bin/env python 
import matplotlib
matplotlib.use('Agg')
import pyfits
import pylab as py
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.ndimage import map_coordinates
#tests using the dipole beams generated by Daniel

AAVS1 = False
EDA = False
freq_MHz = 1.28 * 121
wavelength = 300 / freq_MHz
print "Freq is %s MHz, wavelength %s" % (freq_MHz,wavelength)
k_0=2.*np.pi/wavelength



def polar2cartesian(r, t, grid, x, y, order=3):

    X, Y = np.meshgrid(x, y)

    new_r = np.sqrt(X*X+Y*Y)
    new_t = np.arctan2(X, Y)

    ir = interp1d(r, np.arange(len(r)), bounds_error=False)
    it = interp1d(t, np.arange(len(t)))

    new_ir = ir(new_r.ravel())
    new_it = it(new_t.ravel())

    new_ir[new_r.ravel() > r.max()] = len(r)-1
    new_ir[new_r.ravel() < r.min()] = 0

    return map_coordinates(grid, np.array([new_ir, new_it]),
                            order=order).reshape(new_r.shape)
                            
                            
                            

#Do all of the above for each antenna:

pol_list = ['X','Y']
#ant_list = ['13',  '64'   ,'70'   ,'80'   ,'86'   ,'93'  ,'102'  ,'104'  ,'130'  ,'137'  ,'158',  '163', '169',  '180']
#ant_list = ['1','2','3']
ant_list = range(1,257)
EDA_ant_list = ant_list

if EDA:
   #repeat for EDA:      
   for pol in pol_list[0]:
      Etheta_mag_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Etheta_mag.fits" % pol
      Etheta_phase_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Etheta_phase.fits" % pol
      Ephi_mag_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Ephi_mag.fits" % pol
      Ephi_phase_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Ephi_phase.fits" % pol
      
      Ephi_mag_HDUlist = pyfits.open(Ephi_mag_filename)
      Ephi_mag_header = Ephi_mag_HDUlist[0].header
   
      Ephi_mag_HDUlist.verify('fix')
      Ephi_mag_data = Ephi_mag_HDUlist[0].data
      
      Ephi_phase_HDUlist = pyfits.open(Ephi_phase_filename)
      Ephi_phase_header = Ephi_phase_HDUlist[0].header
      Ephi_phase_HDUlist.verify('fix')
      Ephi_phase_data = Ephi_phase_HDUlist[0].data   
   
      Etheta_mag_HDUlist = pyfits.open(Etheta_mag_filename)
      Etheta_mag_header = Etheta_mag_HDUlist[0].header
      Etheta_mag_HDUlist.verify('fix')
      Etheta_mag_data = Etheta_mag_HDUlist[0].data
    
      Etheta_phase_HDUlist = pyfits.open(Etheta_phase_filename)
      Etheta_phase_header = Etheta_phase_HDUlist[0].header
      Etheta_phase_HDUlist.verify('fix')
      Etheta_phase_data = Etheta_phase_HDUlist[0].data  
      
      for ant_index,ant in enumerate(EDA_ant_list):
         ant_name = 'ant%s' % ant
         Power_patter_ant_interp_dB_title = 'EDA_Antenna %s Power Pattern %s Pol' % (ant_name,pol)
         Power_patter_ant_interp_dB_figname = 'EDA_Power_patter_%s_%s_interp_dB.png' % (ant_name,pol)
         power_pattern_ant_filename = 'EDA_power_pattern_linear_%s_%s_theta_phi.npy' % (ant_name,pol)
         
         print ant_name
         Ephi_phase_data_ant = Ephi_phase_data[ant_index]
         Ephi_mag_data_ant = Ephi_mag_data[ant_index]
         Etheta_phase_data_ant = Etheta_phase_data[ant_index]
         Etheta_mag_data_ant = Etheta_mag_data[ant_index]
         
         power_patter_ant = Etheta_mag_data_ant**2 + Ephi_mag_data_ant**2
         np.save(power_pattern_ant_filename,power_patter_ant)
         
         power_patter_ant_log = 10*np.log10(power_patter_ant)
         
         # Define original polar grid
   
         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(power_patter_ant_log,0,1)
         
         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)
         
         # Interpolate polar grid to cartesian grid (nearest neighbor)
         
         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=3)
         
         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)
         
         
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         ###get east and west right
         ##cart_image = np.flip(cart_image,axis=0)
         ###sort out N-S (same as rotating 180
         ##cart_image = np.flip(cart_image,axis=1)
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
         
         img = ax.imshow(cart_image, interpolation='nearest')
         #fig.savefig('test4.png')
         
         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Power dB', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(Power_patter_ant_interp_dB_title)
         plt.savefig(Power_patter_ant_interp_dB_figname)
       
       
#AAVS-1:
if AAVS1:

   for pol in pol_list:
      #Etheta_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Etheta_mag_RW.fits" % pol
      #Etheta_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Etheta_phase_RW.fits" % pol
      #Ephi_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Ephi_mag_RW.fits" % pol
      #Ephi_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Ephi_phase_RW.fits" % pol
      
      Etheta_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Etheta_mag.fits" % pol
      Etheta_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Etheta_phase.fits" % pol
      Ephi_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Ephi_mag.fits" % pol
      Ephi_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Ephi_phase.fits" % pol      
      
      Ephi_mag_HDUlist = pyfits.open(Ephi_mag_filename)
      Ephi_mag_header = Ephi_mag_HDUlist[0].header
      Ephi_mag_HDUlist.verify('fix')
      Ephi_mag_data = Ephi_mag_HDUlist[0].data
      
      Ephi_phase_HDUlist = pyfits.open(Ephi_phase_filename)
      Ephi_phase_header = Ephi_phase_HDUlist[0].header
      Ephi_phase_HDUlist.verify('fix')
      Ephi_phase_data = Ephi_phase_HDUlist[0].data   
   
      Etheta_mag_HDUlist = pyfits.open(Etheta_mag_filename)
      Etheta_mag_header = Etheta_mag_HDUlist[0].header
      Etheta_mag_HDUlist.verify('fix')
      Etheta_mag_data = Etheta_mag_HDUlist[0].data
    
      Etheta_phase_HDUlist = pyfits.open(Etheta_phase_filename)
      Etheta_phase_header = Etheta_phase_HDUlist[0].header
      Etheta_phase_HDUlist.verify('fix')
      Etheta_phase_data = Etheta_phase_HDUlist[0].data  
      
      for ant_index,ant in enumerate(ant_list):
         ant_name = 'ant%s' % ant
         Power_patter_ant_interp_dB_title = 'Antenna %s Power Pattern %s Pol' % (ant_name,pol)
         Power_patter_ant_interp_dB_figname = 'Power_patter_%s_%s_interp_dB.png' % (ant_name,pol)
         power_pattern_ant_filename = 'AAVS1_power_pattern_linear_%s_%s_theta_phi.npy' % (ant_name,pol)
         
         print ant_name
         Ephi_phase_data_ant = Ephi_phase_data[ant_index]
         Ephi_mag_data_ant = Ephi_mag_data[ant_index]
         Etheta_phase_data_ant = Etheta_phase_data[ant_index]
         Etheta_mag_data_ant = Etheta_mag_data[ant_index]
         
         power_patter_ant = Etheta_mag_data_ant**2 + Ephi_mag_data_ant**2
         np.save(power_pattern_ant_filename,power_patter_ant)
          
         power_patter_ant_log = 10*np.log10(power_patter_ant)
         
         # Define original polar grid
   
         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(power_patter_ant_log,0,1)
         
         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)
         
         # Interpolate polar grid to cartesian grid (nearest neighbor)
         
         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=3)
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         ###get east and west right
         ##cart_image = np.flip(cart_image,axis=0)
         ###sort out N-S (same as rotating 180
         ##cart_image = np.flip(cart_image,axis=1)
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
         
         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)
         
         img = ax.imshow(cart_image, interpolation='nearest')
         #fig.savefig('test4.png')
         
         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Power dB', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(Power_patter_ant_interp_dB_title)
         plt.savefig(Power_patter_ant_interp_dB_figname)
      
      

#---------------------------------------------------
#TESTS
# Define original polar grid

nr = 10
nt = 20

r = np.linspace(1, 100, nr)
t = np.linspace(0., np.pi, nt)
z = np.random.random((nr, nt))

#print z.shape

# Define new cartesian grid

nx = 100
ny = 200

x = np.linspace(0., 100., nx)
y = np.linspace(-100., 100., ny)

# Interpolate polar grid to cartesian grid (nearest neighbor)

#fig = plt.figure()
#ax = fig.add_subplot(111)
#ax.imshow(polar2cartesian(r, t, z, x, y, order=0), interpolation='nearest')
#fig.savefig('test1.png')

# Interpolate polar grid to cartesian grid (cubic spline)

#fig = plt.figure()
#ax = fig.add_subplot(111)
#ax.imshow(polar2cartesian(r, t, z, x, y, order=3), interpolation='nearest')
#fig.savefig('test2.png')


##Open up one of Daniel's files and take a look:
#Xpol Ephi Mag:
Xpol_Ephi_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Ephi_mag_RW.fits"
Xpol_Ephi_mag_HDUlist = pyfits.open(Xpol_Ephi_mag_filename)
Xpol_Ephi_mag_header = Xpol_Ephi_mag_HDUlist[0].header
Xpol_Ephi_mag_HDUlist.verify('fix')
Xpol_Ephi_mag_data = Xpol_Ephi_mag_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Ephi_mag_data_ant13 = Xpol_Ephi_mag_data[0]

#Xpol Ephi Phase:
Xpol_Ephi_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Ephi_phase_RW.fits"
Xpol_Ephi_phase_HDUlist = pyfits.open(Xpol_Ephi_phase_filename)
Xpol_Ephi_phase_header = Xpol_Ephi_phase_HDUlist[0].header
#print Xpol_Ephi_phase_header
Xpol_Ephi_phase_HDUlist.verify('fix')
Xpol_Ephi_phase_data = Xpol_Ephi_phase_HDUlist[0].data
#print Xpol_Ephi_phase_data.shape
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
#print Xpol_Ephi_mag_header['outer_id']
#print Xpol_Ephi_mag_header['inner_id']
#print Xpol_Ephi_mag_header['aavs1_id']
#print Xpol_Ephi_mag_header['AAVS1_XC']
#print Xpol_Ephi_mag_header['AAVS1_YC']

#Plot antenna positions
antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests.png'
antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests'

#x_axis_theta = range(-91,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_spherical_coords_dB_s_to_n)
#plt.xlabel('X coord')
#plt.ylabel('Y coord')
#plt.savefig(antenna_position_plot_figname)



Xpol_Ephi_phase_data_ant13 = Xpol_Ephi_phase_data[0]

#Xpol Etheta Phase:
Xpol_Etheta_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Etheta_phase_RW.fits"
Xpol_Etheta_phase_HDUlist = pyfits.open(Xpol_Etheta_phase_filename)
Xpol_Etheta_phase_header = Xpol_Etheta_phase_HDUlist[0].header
Xpol_Etheta_phase_HDUlist.verify('fix')
Xpol_Etheta_phase_data = Xpol_Etheta_phase_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Etheta_phase_data_ant13 = Xpol_Etheta_phase_data[0]

#Xpol Etheta Mag:
Xpol_Etheta_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Etheta_mag_RW.fits"
Xpol_Etheta_mag_HDUlist = pyfits.open(Xpol_Etheta_mag_filename)
Xpol_Etheta_mag_header = Xpol_Etheta_mag_HDUlist[0].header
Xpol_Etheta_mag_HDUlist.verify('fix')
Xpol_Etheta_mag_data = Xpol_Etheta_mag_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Etheta_mag_data_ant13 = Xpol_Etheta_mag_data[0]
#print Xpol_Etheta_mag_data_ant13.shape
Xpol_power_patter_ant13 = Xpol_Etheta_mag_data_ant13**2 + Xpol_Ephi_mag_data_ant13**2
Xpol_power_patter_ant13_log = 10*np.log10(Xpol_power_patter_ant13)



#P_pattern (dB) = 10*log10(abs(X_theta).^2 + abs(X_phi).^2)
#Where X_theta and X_phi are complex values taken directly from the .ffe file. The log10 represents a base 10 log not natural log a.k.a ln.

# Define original polar grid

nr = 91
nt = 361

r = np.linspace(1, 91, nr)
t = np.linspace(-np.pi, np.pi, nt)

#z = np.swapaxes(Xpol_Etheta_mag_data_ant13,0,1)

z = np.swapaxes(Xpol_power_patter_ant13_log,0,1)
#z = np.swapaxes( 10*np.log10(Xpol_Etheta_mag_data_ant13**2 + Xpol_Ephi_mag_data_ant13**2), 0 , 1)

#print z.shape

# Define new cartesian grid

nx = 180
ny = 180

x = np.linspace(-90, 90., nx)
y = np.linspace(-90., 90., ny)



# Interpolate polar grid to cartesian grid (nearest neighbor)

fig = plt.figure()
ax = fig.add_subplot(111)
cart_image = polar2cartesian(r, t, z, x, y, order=0)
#blank out below horizon:
centre_x = nx/2
centre_y = ny/2
#centre_x = 3
#centre_y = 3
y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
mask = x**2+y**2 <= centre_x**2
mask = 1*mask.astype(float)


#cart_image = cart_image*mask
#cart_image[cart_image==-0.] = np.nan
#
#img = ax.imshow(cart_image, interpolation='nearest')
##fig.savefig('test3.png')
#plt.colorbar(img, ax=ax)
#plt.savefig('test3.png')

# Interpolate polar grid to cartesian grid (cubic spline)

fig = plt.figure()
ax = fig.add_subplot(111)
cart_image = polar2cartesian(r, t, z, x, y, order=3)
cart_image = cart_image*mask
cart_image[cart_image==-0.] = np.nan
###get east and west right
##cart_image = np.flip(cart_image,axis=0)
###sort out N-S (same as rotating 180
##cart_image = np.flip(cart_image,axis=1)
cart_image = np.rot90(cart_image, k=1, axes=(0,1))

#cart_image[90,0:50] = 0

img = ax.imshow(cart_image, interpolation='nearest')
#fig.savefig('test4.png')

cbar = plt.colorbar(img, ax=ax)
cbar.set_label('Power dB', rotation=270, labelpad=10)
#plt.colorbar(img, ax=ax)
plt.savefig('Power_patter_ant13_interp_dB.png')

#img = ax.pcolor(T,R,P) 
#plt.colorbar(img, ax=ax)
#plt.savefig(figname)

#Plot some profiles:

#profile from zenith to the west (probably the conventions of angles are all mixed up)
#Xpol_power_patter_ant13_zenith_to_east_spherical_coords = Xpol_power_patter_ant13[0,:]
#x_axis_theta = range(0,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (V/m)^2')
#plt.savefig('profile_zenith_to_east_linear.png')

Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB = 10*np.log10(Xpol_power_patter_ant13[0,:])
#x_axis_theta = range(0,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (dB)')
#plt.savefig('profile_zenith_to_east_dB.png')

Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_e = 10*np.log10(Xpol_power_patter_ant13[0,:])
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_w = 10*np.log10(Xpol_power_patter_ant13[180,:])
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_z = np.flip(Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_w, axis=0)
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_e = np.append(Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_z,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_e)

x_axis_theta = range(-91,91,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_e)
plt.xlabel('Zenith angle - West to East')
plt.ylabel('Power (dB)')
plt.savefig('profile_west_to_east_dB.png')


#sin_proj

x_axis_theta_deg = np.arange(0,91,1)
x_axis_theta_rad = x_axis_theta_deg/180. * np.pi
x_axis_theta_sin = np.sin(x_axis_theta_rad)
fig = plt.figure()
img = plt.plot(x_axis_theta_sin,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB)
plt.xlabel('Sin Zenith angle Sin(theta)')
plt.ylabel('Power (dB)')
plt.savefig('profile_zenith_to_east_dB_sin_proj.png')



##interpolated is rotated 180 deg 
#Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB = cart_image[0:90,90]
#x_axis_theta = range(90,0,-1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (dB)')
#plt.savefig('profile_zenith_to_east_dB_cart_interp.png')

Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB = cart_image[90,:]
x_axis_theta = range(-90,90,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB)
plt.xlabel('Zenith angle - West to East')
plt.ylabel('Power (dB)')
plt.savefig('profile_west_to_east_dB_cart_interp.png')

#S-N profiles:
Xpol_power_patter_ant13_spherical_coords_dB_z_to_n = 10*np.log10(Xpol_power_patter_ant13[90,:])
Xpol_power_patter_ant13_spherical_coords_dB_z_to_s = 10*np.log10(Xpol_power_patter_ant13[270,:])
Xpol_power_patter_ant13_spherical_coords_dB_s_to_z = np.flip(Xpol_power_patter_ant13_spherical_coords_dB_z_to_s, axis=0)
Xpol_power_patter_ant13_spherical_coords_dB_s_to_n = np.append(Xpol_power_patter_ant13_spherical_coords_dB_s_to_z,Xpol_power_patter_ant13_spherical_coords_dB_z_to_n)

x_axis_theta = range(-91,91,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_spherical_coords_dB_s_to_n)
plt.xlabel('Zenith angle - South to North')
plt.ylabel('Power (dB)')
plt.savefig('profile_south_to_north_dB.png')


Xpol_power_patter_ant13_south_to_north_cartesian_coords_dB = cart_image[:,90]
x_axis_theta = range(-90,90,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_south_to_north_cartesian_coords_dB)
plt.xlabel('Zenith angle - South to North')
plt.ylabel('Power (dB)')
plt.savefig('profile_south_to_north_dB_cart_interp.png')


##Open up one of Daniel's files and take a look:
#Xpol Ephi Phase:
antenna_name_list = range(1,257)
antenna_position_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/locations.txt"
antenna_position_filename_randall = "/mnt/md0/AAVS-1/beam_pattern_tests/data/locations_randall.txt"

#Daniels:
antenna_position_x_list=[]
antenna_position_y_list=[]
with open(antenna_position_filename,'r') as f:
   lines = f.readlines()
for line in lines:
   antenna_position_x = float(line.strip().split('\t')[1])
   antenna_position_y = float(line.strip().split('\t')[2])
   antenna_position_x_list.append(antenna_position_x)
   antenna_position_y_list.append(antenna_position_y)   

antenna_position_x_m = np.asarray(antenna_position_x_list)
antenna_position_y_m = np.asarray(antenna_position_y_list)


#Plot antenna positions
antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests_daniel.png'
antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests Daniel'

fig, ax = plt.subplots()
ax.scatter(antenna_position_x_m,antenna_position_y_m, marker='.')

for i, name in enumerate(antenna_name_list):
    ax.annotate(str(name), (antenna_position_x_m[i],antenna_position_y_m[i]),size=5)
    
plt.xlabel('X offset from centre (m) ')
plt.ylabel('Y offset from centre (m) ')
plt.title(antenna_position_plot_title)
plt.savefig(antenna_position_plot_figname,dpi = 300)

#Randalls:
antenna_position_x_list_randall=[]
antenna_position_y_list_randall=[]
antenna_names_list_randall=[]
new_antenna_position_list=[]
with open(antenna_position_filename_randall,'r') as f:
   lines = f.readlines()
for line in lines:
   antenna_name_randall = line.strip().split('\t')[0]
   antenna_position_x_randall = float(line.strip().split('\t')[1])
   antenna_position_y_randall = float(line.strip().split('\t')[2])
   antenna_names_list_randall.append(antenna_name_randall)
   antenna_position_x_list_randall.append(antenna_position_x_randall)
   antenna_position_y_list_randall.append(antenna_position_y_randall)
      

antenna_position_x_m_randall = np.asarray(antenna_position_x_list_randall)
antenna_position_y_m_randall = np.asarray(antenna_position_y_list_randall)

new_antenna_position_list_filename = 'new_antenna_mapping_AAVS-1.txt'
position_tolerance = 0.1
for pos_index,x_pos_randall in enumerate(antenna_position_x_m_randall):
   y_pos_randall = antenna_position_y_m_randall[pos_index]
   antenna_name_randall = antenna_names_list_randall[pos_index]
   for x_pos_daniel_index,x_pos_daniel in enumerate(antenna_position_x_m):
      y_pos_daniel = antenna_position_y_m[x_pos_daniel_index]
      antenna_name_daniel = str(x_pos_daniel_index+1)
      x_diff = abs(x_pos_randall-x_pos_daniel)
      y_diff = abs(y_pos_randall-y_pos_daniel)
      if ((x_diff < position_tolerance) and (y_diff < position_tolerance)):
         new_position_line = "%s %s %s %s %s %s" % (antenna_name_randall,x_pos_randall,y_pos_randall,antenna_name_daniel,x_pos_daniel,y_pos_daniel)
         new_antenna_position_list.append(new_position_line)

with open (new_antenna_position_list_filename, 'w') as outfile:
    outfile.write("\n".join(new_antenna_position_list))


#Plot antenna positions
antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests_randall.png'
antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests Randall'

fig, ax = plt.subplots()
ax.scatter(antenna_position_x_m,antenna_position_y_m, marker='.')

for i, name in enumerate(antenna_name_list):
    ax.annotate(str(name), (antenna_position_x_m[i],antenna_position_y_m[i]),size=5)

plt.xlabel('X offset from centre (m) ')
plt.ylabel('Y offset from centre (m) ')
plt.title(antenna_position_plot_title)
plt.savefig(antenna_position_plot_figname,dpi = 300)

###############amplitude variation due to beam

#Ref Antenna (ant002) is 116 in Daniel's numbering
#Choose 2 antennas to compare:
#outer: ant041 (Daniel 129) (randall pos (9.7005,-14.6269)) Daniel pos (9.697 , -14.654)
#inner: ant100 (Daniel 235) (randall pos (2.178,-0.6593)) (Daniel Pos (2.194, -0.649)

position_offset_ant041_x_randall = 9.7005
position_offset_ant041_y_randall = -14.6269
position_offset_ant100_x_randall = 2.178
position_offset_ant100_y_randall = -0.6593

#Sun alt,az (from Randall - not sure what date this is .... az is clockwise from North (not Daniel's phi which is anticlockwise from East)
#Think it is 05 April 2018 Sun 2 hr obs
sun_az_elev_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/sun_az_elev.txt"

sun_az_list=[]
sun_elev_list=[]
with open(sun_az_elev_filename,'r') as f:
   lines = f.readlines()
for line in lines:
   sun_az = float(line.strip().split()[0])
   sun_elev = float(line.strip().split()[1])
   sun_az_list.append(sun_az)
   sun_elev_list.append(sun_elev)



#No - do for whole sun track from randall
##Pick the sun az,elev at 0400 UTC on 26 April 2018 (from print_src.py)
##print_src.py --date="2018/04/26 04:00:00"
##  Sun: ra =  2:13:20.23, dec =  13:24:02.4, az =   4.2038, el =  49.7369:  1e4 Jy - 1e8 Jy 
#sun_az_randall_deg = 4.2
#sun_alt_randall_deg = 49.7
#sun_phi_daniel_deg = 90. - sun_az_randall_deg
#sun_theta_daniel_deg = 90. - sun_alt_randall_deg
#sun_phi_daniel_rad = sun_phi_daniel_deg/180. * np.pi
#sun_theta_daniel_rad = sun_theta_daniel_deg/180. * np.pi

#phase offset stuff: (need to work out how these phases relate to the individual componet Ephi and Etheta phases)
#k_x = k_0 * np.cos(sun_phi_daniel_rad)*np.sin(sun_theta_daniel_rad)
#k_y = k_0 * np.sin(sun_phi_daniel_rad)*np.sin(sun_theta_daniel_rad)
#residual_phase_ant_041_rad = position_offset_ant041_x * k_x + position_offset_ant041_y * k_y 
#residual_phase_ant_041_deg = residual_phase_ant_041_rad/np.pi * 180.
#
#print residual_phase_ant_041_rad
#print residual_phase_ant_041_deg
#I think only the phase changes, amplitude remains the same?

#ant041:
#position_offset_ant041_x = position_offset_ant041_x_randall
#position_offset_ant041_y = position_offset_ant041_y_randall

#read the new position file and make the amplitude variation plots
with open(new_antenna_position_list_filename,'r') as f:
   lines = f.readlines()
for line in lines:
   ant_name_randall = line.split()[0][3:6]
   ant_name_daniel = line.split()[3]

   for pol in pol_list:
      #Randal002 = Daniel116, Randal041 = Daniel129, Randal100 = Daniel235
      print "Randall antenna name %s, Daniel antenna name %s" % (ant_name_randall,ant_name_daniel) 
      ant002_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_ant116_%s_theta_phi.npy' % pol
      ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_ant%s_%s_theta_phi.npy' % (ant_name_daniel,pol)
      #ant100_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_ant235_%s_theta_phi.npy' % pol
      ant002_pattern = np.load(ant002_pattern_filename)
      ant_compare_pattern = np.load(ant_compare_pattern_filename)
      #ant100_compare_pattern = np.load(ant100_compare_pattern_filename)
      #normalise the beam patterns with respect to ant002 reference antenna
      max_ant002 = np.max(ant002_pattern)
      ant002_pattern_normalised = ant002_pattern/max_ant002
      ant_compare_pattern_normalised = ant_compare_pattern/max_ant002
      #ant100_compare_pattern_normalised = ant100_compare_pattern/max_ant002
      amplitude_ratio_ant_compare_ant002_list=[]
      #amplitude_ratio_ant100_ant002_list=[]
      #
      #print sun_elev_list[11]
      sun_phi_daniel_deg_list = []
      sun_theta_daniel_deg_list = []
      for sun_az_randall_deg_index,sun_az_randall_deg in enumerate(sun_az_list):
         sun_alt_randall_deg = sun_elev_list[sun_az_randall_deg_index]
         sun_phi_daniel_deg = np.round(90. - sun_az_randall_deg)
         if (sun_phi_daniel_deg < 0):
            sun_phi_daniel_deg += 360.
         sun_phi_daniel_deg=int(sun_phi_daniel_deg)
         sun_theta_daniel_deg = int(np.round(90. - sun_alt_randall_deg))
         sun_phi_daniel_deg_list.append(sun_theta_daniel_deg)
         sun_theta_daniel_deg_list.append(sun_theta_daniel_deg)
         #sun_phi_daniel_rad = sun_phi_daniel_deg/180. * np.pi
         #sun_theta_daniel_rad = sun_theta_daniel_deg/180. * np.pi
         #print sun_phi_daniel_deg
         #print sun_theta_daniel_deg
         #print ant041_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
         beam_power_ant002_pos = ant002_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
         beam_power_ant_compare_pos = ant_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
         #beam_power_ant100_pos = ant100_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
         amplitude_ratio_ant_compare_ant002 = beam_power_ant_compare_pos/beam_power_ant002_pos
         #amplitude_ratio_ant100_ant002 = beam_power_ant100_pos/beam_power_ant002_pos
         amplitude_ratio_ant_compare_ant002_list.append(amplitude_ratio_ant_compare_ant002)
         #amplitude_ratio_ant100_ant002_list.append(amplitude_ratio_ant100_ant002)

      amplitude_ratio_ant_compare_ant002_array = np.asarray(amplitude_ratio_ant_compare_ant002_list)
      #amplitude_ratio_ant100_ant002_array = np.asarray(amplitude_ratio_ant100_ant002_list)

      x  = range(len(sun_theta_daniel_deg_list))

      fig, ax = plt.subplots()
      ax.plot(x,amplitude_ratio_ant_compare_ant002_array,label='ant%s/ant002' % ant_name_randall)
      #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')

      power_ratio_title = 'Ratio of beam power pattern Ant%s (ref Ant002) at Sun position %s Pol' % (ant_name_randall,pol)
      power_ratio_figname = 'ratio_power_patterns_Ant%s_ref_Ant002_%s_pol.png' % (ant_name_randall,pol)
      plt.legend(loc=1)
      plt.xlabel('Time (units of time) ')
      plt.ylabel('Ratio of beam power pattern')
      plt.title(power_ratio_title)
      plt.savefig(power_ratio_figname)





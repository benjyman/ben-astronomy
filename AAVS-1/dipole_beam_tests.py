#!/usr/bin/env python 
import matplotlib
import cmd
matplotlib.use('Agg')
import pyfits
import pylab as py
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.ndimage import map_coordinates
import datetime
from matplotlib.dates import  DateFormatter
import subprocess
from fpdf import FPDF
import os,sys
import cmath
#tests using the dipole beams generated by Daniel

AAVS1 = False
EDA = False
make_new_position_files = False
make_amp_variation_plots = False
#dont' use - wrong for now (divide by ant2):
plot_cal_sols_only = False
compare_sols_to_beam = False
new_sun_pos_file = False
combine_to_pdf = True
pdf_compare_beam_amp = False
pdf_compare_beam_phase = False
pdf_compare_beam_amp_EDA = True
pdf_compare_beam_phase_EDA = True
pdf_beam_maps_AAVS1_amp = False
pdf_beam_maps_AAVS1_phase = False
pdf_beam_maps_EDA_amp = False
pdf_beam_maps_EDA_phase = False

#freq_MHz = 1.28 * 121
freq_MHz = 160.

if freq_MHz==160.:
   EDA_chan=125

wavelength = 300 / freq_MHz
print "Freq is %s MHz, wavelength %s" % (freq_MHz,wavelength)
k_0=2.*np.pi/wavelength

new_antenna_position_list_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/new_antenna_mapping_AAVS-1.txt'

antenna_locations_final_filename = "/mnt/md0/AAVS-1/AAVS1_locations_final.txt"
#antenna_locations_EDA_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/locations.txt"

#Do all of the above for each antenna:

pol_list = ['X','Y']
#ant_list = ['13',  '64'   ,'70'   ,'80'   ,'86'   ,'93'  ,'102'  ,'104'  ,'130'  ,'137'  ,'158',  '163', '169',  '180']
#ant_list = ['1','2','3']
#ant_list = range(1,257)
#EDA_ant_list = ant_list



#sun_az_elev_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/sun_az_elev_20180509.txt"
#date_string='2018/05/09'

#stuff for compare sols
#sun_az_elev_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/sun_az_elev_20180711.txt"
sun_az_elev_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/new_data/sun_az_elev_20180711.txt"

date_string='2018/07/11'

#sun_amp_sols_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180509/gainsextract_sun_20180509_amp.txt'
#sun_ph_sols_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180509/gainsextract_sun_20180509_ph.txt'

#OLD with clipping problem:
#sun_amp_sols_X_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180711/20180711/gainsextract_sun_20180711_XX_amp.txt'
#sun_ph_sols_X_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180711/20180711/gainsextract_sun_20180711_XX_pha.txt'
#sun_amp_sols_Y_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180711/20180711/gainsextract_sun_20180711_YY_amp.txt'
#sun_ph_sols_Y_filename = '/md0/AAVS-1/beam_pattern_tests/data/cal_sols_sun_20180711/20180711/gainsextract_sun_20180711_YY_pha.txt'

#New cal from 26 July 2018
sun_amp_sols_X_filename = '/md0/AAVS-1/beam_pattern_tests/new_data/cal_sols_sun_20180711/160_MHz/gainsextract_sun_20180711_XX_amp.txt'
sun_ph_sols_X_filename = '/md0/AAVS-1/beam_pattern_tests/new_data/cal_sols_sun_20180711/160_MHz/gainsextract_sun_20180711_XX_pha.txt'
sun_amp_sols_Y_filename = '/md0/AAVS-1/beam_pattern_tests/new_data/cal_sols_sun_20180711/160_MHz/gainsextract_sun_20180711_YY_amp.txt'
sun_ph_sols_Y_filename = '/md0/AAVS-1/beam_pattern_tests/new_data/cal_sols_sun_20180711/160_MHz/gainsextract_sun_20180711_YY_pha.txt'


def combine_images_to_pdf(imagelist,pol,figname):

   pdf = FPDF('P', 'mm', 'A4')
   # imagelist is the list with all image filenames
   #/usr/bin/montage compare*X*.png -mode concatenate -tile 3x5 out.pdf
   #/usr/bin/convert 0 out.pdf -quality 50 out2.pdf
   cmd = "rm *_compressed*"
   os.system(cmd)
   cmd = "rm %s" % figname
   os.system(cmd)
   for image in imagelist:
      image_base = image.split('.')[0]
      print image_base
      comp_image = '%s_compressed.jpg' % image_base
      cmd = '/usr/bin/convert -quality 25 %s %s ' % (image,comp_image)
      print cmd
      os.system(cmd)
   if ('compare' in figname and 'amp' in figname and 'AAVS' in figname):
      cmd = '/usr/bin/montage compare*amp*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('compare' in figname and 'phase' in figname and 'AAVS' in figname):
      cmd = '/usr/bin/montage compare*phase*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('compare' in figname and 'phase' in figname and 'EDA' in figname):
      cmd = '/usr/bin/montage EDA*compare*phase*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('compare' in figname and 'amp' in figname and 'EDA' in figname):
      cmd = '/usr/bin/montage EDA*compare*amp*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('EDA' in figname and 'power' in figname):
      cmd = '/usr/bin/montage EDA_Power_*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('EDA' in figname and 'phase' in figname):
      cmd = '/usr/bin/montage EDA_phase_*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   elif ('phase_patterns_AAVS' in figname):
      cmd = '/usr/bin/montage phase_*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   else:
      cmd = '/usr/bin/montage Power_*%s*_compressed.jpg -mode concatenate -tile 3x5 %s' % (pol,figname)
   #print cmd
   os.system(cmd)
   
   
def polar2cartesian(r, t, grid, x, y, order=3):

    X, Y = np.meshgrid(x, y)

    new_r = np.sqrt(X*X+Y*Y)
    new_t = np.arctan2(X, Y)

    ir = interp1d(r, np.arange(len(r)), bounds_error=False)
    it = interp1d(t, np.arange(len(t)))

    new_ir = ir(new_r.ravel())
    new_it = it(new_t.ravel())

    new_ir[new_r.ravel() > r.max()] = len(r)-1
    new_ir[new_r.ravel() < r.min()] = 0

    return map_coordinates(grid, np.array([new_ir, new_it]),
                            order=order).reshape(new_r.shape)
                            
                            
                            

if EDA:
   #repeat for EDA:      
   for pol in pol_list:
      #old:
      #Etheta_mag_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Etheta_mag.fits" % pol
      #Etheta_phase_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Etheta_phase.fits" % pol
      #Ephi_mag_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Ephi_mag.fits" % pol
      #Ephi_phase_filename = "/md0/AAVS-1/beam_pattern_tests/data/EDA_beams/EDA_%spol_Ephi_phase.fits" % pol

      Etheta_mag_filename = "/md0/AAVS-1/beam_pattern_tests/new_data/EDA/Ch_%s/EDA_%spol_Etheta_mag_ch%s.fits" % (EDA_chan,pol,EDA_chan)
      Etheta_phase_filename = "/md0/AAVS-1/beam_pattern_tests/new_data/EDA/Ch_%s/EDA_%spol_Etheta_phase_ch%s.fits" % (EDA_chan,pol,EDA_chan)
      Ephi_mag_filename = "/md0/AAVS-1/beam_pattern_tests/new_data/EDA/Ch_%s/EDA_%spol_Ephi_mag_ch%s.fits" % (EDA_chan,pol,EDA_chan)
      Ephi_phase_filename = "/md0/AAVS-1/beam_pattern_tests/new_data/EDA/Ch_%s/EDA_%spol_Ephi_phase_ch%s.fits" % (EDA_chan,pol,EDA_chan)

      Ephi_mag_HDUlist = pyfits.open(Ephi_mag_filename)
      Ephi_mag_header = Ephi_mag_HDUlist[0].header
   
      Ephi_mag_HDUlist.verify('fix')
      Ephi_mag_data = Ephi_mag_HDUlist[0].data
      
      Ephi_phase_HDUlist = pyfits.open(Ephi_phase_filename)
      Ephi_phase_header = Ephi_phase_HDUlist[0].header
      Ephi_phase_HDUlist.verify('fix')
      Ephi_phase_data = Ephi_phase_HDUlist[0].data   
   
      Etheta_mag_HDUlist = pyfits.open(Etheta_mag_filename)
      Etheta_mag_header = Etheta_mag_HDUlist[0].header
      Etheta_mag_HDUlist.verify('fix')
      Etheta_mag_data = Etheta_mag_HDUlist[0].data
    
      Etheta_phase_HDUlist = pyfits.open(Etheta_phase_filename)
      Etheta_phase_header = Etheta_phase_HDUlist[0].header
      Etheta_phase_HDUlist.verify('fix')
      Etheta_phase_data = Etheta_phase_HDUlist[0].data  
      
      #for ant_index,ant in enumerate(EDA_ant_list):
      with open(new_antenna_position_list_filename,'r') as f:
         lines = f.readlines()
      #get the position of ant_002
      for line in lines:
         #for ant_index in range(0,256):
         ant_name_randall = line.split()[0][3:6]
         ant_name_daniel = line.split()[3]
         ant_index = int(ant_name_daniel)-1
         if ant_name_randall == '002':
            ant002_pos_x_daniel = float(line.strip().split()[4])
            ant002_pos_y_daniel = float(line.strip().split()[5]) 
            ant002_name_daniel = line.split()[3]
            ant002_index = int(ant002_name_daniel)-1
            Ephi_phase_data_ant = Ephi_phase_data[ant002_index]
            Ephi_mag_data_ant = Ephi_mag_data[ant002_index]
            Etheta_phase_data_ant = Etheta_phase_data[ant002_index]
            Etheta_mag_data_ant = Etheta_mag_data[ant002_index]
            Ephi_real_ant = Ephi_mag_data_ant * np.cos(Ephi_phase_data_ant)
            Ephi_imag_ant = Ephi_mag_data_ant * np.sin(Ephi_phase_data_ant)
            Ephi_complex_Ant002 = Ephi_real_ant+Ephi_imag_ant*1j
            Etheta_real_ant = Etheta_mag_data_ant * np.cos(Etheta_phase_data_ant)
            Etheta_imag_ant = Etheta_mag_data_ant * np.sin(Etheta_phase_data_ant)
            Etheta_complex_Ant002 = Etheta_real_ant+Etheta_imag_ant*1j

      for line in lines:
         #for ant_index in range(0,256):
         ant_name_randall = line.split()[0][3:6]
         ant_name_daniel = line.split()[3]
         ant_index = int(ant_name_daniel)-1

         ant_pos_x = float(line.strip().split()[4])
         ant_pos_y = float(line.strip().split()[5])
         delta_x = ant_pos_x - ant002_pos_x_daniel
         delta_y = ant_pos_y - ant002_pos_y_daniel


         ant_name = 'Ant%s' % ant_name_randall
         Power_patter_ant_interp_dB_title = 'EDA_Antenna %s Power Pattern %s Pol %s MHz' % (ant_name,pol,int(freq_MHz))
         Power_patter_ant_interp_dB_figname = 'EDA_Power_patter_%s_%s_%sMHzinterp_dB.png' % (ant_name,pol,int(freq_MHz))
         power_pattern_ant_filename = 'EDA_power_pattern_linear_%s_%s_%sMHz_theta_phi.npy' % (ant_name,pol,int(freq_MHz))

         phase_pattern_ant_interp_title = 'EDA_Antenna %s Phase Pattern %s Pol %s MHz ref Ant002' % (ant_name,pol,int(freq_MHz))
         phase_pattern_ant_interp_figname = 'EDA_phase_pattern_%s_%s_%sMHzinterp.png' % (ant_name,pol,int(freq_MHz))
         phase_pattern_ant_filename = 'EDA_phase_pattern_linear_%s_%s_%sMHz_theta_phi.npy' % (ant_name,pol,int(freq_MHz))
         
         print "saved %s" % Power_patter_ant_interp_dB_figname
         Ephi_phase_data_ant = Ephi_phase_data[ant_index]
         Ephi_mag_data_ant = Ephi_mag_data[ant_index]
         Etheta_phase_data_ant = Etheta_phase_data[ant_index]
         Etheta_mag_data_ant = Etheta_mag_data[ant_index]
         
         power_patter_ant = Etheta_mag_data_ant**2 + Ephi_mag_data_ant**2

         #normalise by max Ant001
         if (ant_name_randall=='001'):
            max_ant = np.max(power_patter_ant)
            min_ant = np.min(power_patter_ant)

         power_patter_ant = power_patter_ant/max_ant
         np.save(power_pattern_ant_filename,power_patter_ant)
         
         power_patter_ant_log = 10*np.log10(power_patter_ant)
         
         #PHASE:
         Ephi_real_ant = Ephi_mag_data_ant * np.cos(Ephi_phase_data_ant)
         Ephi_imag_ant = Ephi_mag_data_ant * np.sin(Ephi_phase_data_ant)
         Ephi_complex_ant = Ephi_real_ant+Ephi_imag_ant*1j
         Etheta_real_ant = Etheta_mag_data_ant * np.cos(Etheta_phase_data_ant)
         Etheta_imag_ant = Etheta_mag_data_ant * np.sin(Etheta_phase_data_ant)
         Etheta_complex_ant = Etheta_real_ant+Etheta_imag_ant*1j

         #For two antennas, the gains can be separated such that:
         # g1g2* (e_ant1)T (e_ant2)*
         #where g1 and g2 are the complex gain solutions and e_ant_1 and e_ant2 are the complex beam vectors with components in e_theta and e_phi
         #So it is this quantity: (e_ant1)T (e_ant2)* that affects the gain solutions, hence the gain solution phase will correct for variations in this
         #So we need to calculate (e_ant1)T (e_ant2)* and find the phase of it, call it the beam_gain

         beam_gain_complex = Etheta_complex_Ant002*Etheta_complex_ant.conjugate() + Ephi_complex_Ant002*Ephi_complex_ant.conjugate()
         #beam_gain_complex = Etheta_complex_ant*Etheta_complex_Ant002.conjugate() + Ephi_complex_ant*Ephi_complex_Ant002.conjugate()

         beam_gain_complex_phase_rad = np.angle(beam_gain_complex)

         phase_ramp_phi_theta = np.zeros([361,91])
         for phi in range(0,361):
            for theta in range(0,91):
               phi_rad = phi/180.*np.pi
               theta_rad = theta/180.*np.pi
               k_x = k_0 * np.cos(phi_rad)* np.sin(theta_rad)
               k_y = k_0 * np.sin(phi_rad)* np.sin(theta_rad)
               phase_delta = k_x * delta_x + k_y * delta_y
               while (phase_delta < -np.pi ):
                  phase_delta += 2*np.pi
               while (phase_delta > np.pi):
                  phase_delta -= 2*np.pi
               phase_ramp_phi_theta[phi,theta] = phase_delta
               beam_gain_complex_phase_rad[phi,theta] += phase_delta
               if (beam_gain_complex_phase_rad[phi,theta] >= np.pi):
                  beam_gain_complex_phase_rad[phi,theta] -= 2*np.pi
               if (beam_gain_complex_phase_rad[phi,theta] <= -np.pi):
                  beam_gain_complex_phase_rad[phi,theta] += 2*np.pi 

         phase_pattern_deg = beam_gain_complex_phase_rad/np.pi*180.
         phase_ramp_phi_theta_deg = phase_ramp_phi_theta/np.pi*180.

         np.save(phase_pattern_ant_filename,beam_gain_complex_phase_rad)
         print "saved %s" % phase_pattern_ant_filename


 
         #Plot AMP
         # Define original polar grid
   
         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(power_patter_ant_log,0,1)
         
         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)
         
         # Interpolate polar grid to cartesian grid (nearest neighbor)
         
         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=3)
         
         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)
                  
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan

         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
         
         img = ax.imshow(cart_image, interpolation='nearest',vmax=0,vmin=-25)
         
         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Power dB', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(Power_patter_ant_interp_dB_title)
         plt.savefig(Power_patter_ant_interp_dB_figname)
         plt.close()     

         #Plot Phase
         # Define original polar grid

         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(phase_pattern_deg,0,1)

         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)

         # Interpolate polar grid to cartesian grid (nearest neighbor)

         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=3)

         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)

         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))

         img = ax.imshow(cart_image, interpolation='nearest',vmax=60,vmin=-60)

         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Phase (deg)', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(phase_pattern_ant_interp_title)
         plt.savefig(phase_pattern_ant_interp_figname)
         plt.close()
#AAVS-1:
if AAVS1:

   for pol in pol_list:
      #Etheta_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Etheta_mag_RW.fits" % pol
      #Etheta_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Etheta_phase_RW.fits" % pol
      #Ephi_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Ephi_mag_RW.fits" % pol
      #Ephi_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/%spol_Ephi_phase_RW.fits" % pol
      
      
      #Etheta_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Etheta_mag.fits" % pol
      #Etheta_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Etheta_phase.fits" % pol
      #Ephi_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Ephi_mag.fits" % pol
      #Ephi_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/%spol_Ephi_phase.fits" % pol      
       
      #Latest 26 July 2018
      Etheta_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_%spol_Etheta_mag%sMHz.fits" % (int(freq_MHz),pol,int(freq_MHz))
      Etheta_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_%spol_Etheta_phase%sMHz.fits" %  (int(freq_MHz),pol,int(freq_MHz))
      Ephi_mag_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_%spol_Ephi_mag%sMHz.fits" %  (int(freq_MHz),pol,int(freq_MHz))
      Ephi_phase_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_%spol_Ephi_phase%sMHz.fits" %  (int(freq_MHz),pol,int(freq_MHz))
         
      
      Ephi_mag_HDUlist = pyfits.open(Ephi_mag_filename)
      Ephi_mag_header = Ephi_mag_HDUlist[0].header
      Ephi_mag_HDUlist.verify('fix')
      Ephi_mag_data = Ephi_mag_HDUlist[0].data
      
      Ephi_phase_HDUlist = pyfits.open(Ephi_phase_filename)
      Ephi_phase_header = Ephi_phase_HDUlist[0].header
      Ephi_phase_HDUlist.verify('fix')
      Ephi_phase_data = Ephi_phase_HDUlist[0].data   
   
      Etheta_mag_HDUlist = pyfits.open(Etheta_mag_filename)
      Etheta_mag_header = Etheta_mag_HDUlist[0].header
      Etheta_mag_HDUlist.verify('fix')
      Etheta_mag_data = Etheta_mag_HDUlist[0].data
    
      Etheta_phase_HDUlist = pyfits.open(Etheta_phase_filename)
      Etheta_phase_header = Etheta_phase_HDUlist[0].header
      Etheta_phase_HDUlist.verify('fix')
      Etheta_phase_data = Etheta_phase_HDUlist[0].data  
      
      #with open(new_antenna_position_list_filename,'r') as f:
      #   lines = f.readlines()
      #for line in lines:
      
      #need the Ant002 (or any) antenna phase for phase pattern
      ant_index = 1
      ant_name_randall = "%03d" % (ant_index+1)
      Ephi_phase_data_ant = Ephi_phase_data[ant_index]
      Ephi_mag_data_ant = Ephi_mag_data[ant_index]
      Etheta_phase_data_ant = Etheta_phase_data[ant_index]
      Etheta_mag_data_ant = Etheta_mag_data[ant_index]
      
      Ephi_real_Ant002 = Ephi_mag_data_ant * np.cos(Ephi_phase_data_ant)
      Ephi_imag_Ant002 = Ephi_mag_data_ant * np.sin(Ephi_phase_data_ant)
      Ephi_complex_Ant002 = Ephi_real_Ant002 + Ephi_imag_Ant002*1j
      Etheta_real_Ant002 = Etheta_mag_data_ant * np.cos(Etheta_phase_data_ant)
      Etheta_imag_Ant002 = Etheta_mag_data_ant * np.sin(Etheta_phase_data_ant)
      Etheta_complex_Ant002 = Etheta_real_Ant002+Etheta_imag_Ant002*1j
      
      antenna_locations_list_x = []
      antenna_locations_list_y = []
      with open(antenna_locations_final_filename,'r') as f:
         lines = f.readlines()
      for line in lines:
         antenna_position_x = float(line.strip().split()[1])
         antenna_position_y = float(line.strip().split()[2])
         antenna_locations_list_x.append(antenna_position_x)
         antenna_locations_list_y.append(antenna_position_y)
         
         
      ant002_pos_x = antenna_locations_list_x[1]
      ant002_pos_y = antenna_locations_list_y[1]
      
      for ant_index in range(0,256):
         #ant_name_randall = line.split()[0][3:6]
         ant_name_randall = "%03d" % (ant_index+1)
         ant_pos_x = antenna_locations_list_x[ant_index]
         ant_pos_y = antenna_locations_list_y[ant_index]
         delta_x = ant_pos_x - ant002_pos_x
         delta_y = ant_pos_y - ant002_pos_y
        
         #ant_name_daniel = line.split()[3]
         #ant_index = int(ant_name_daniel)-1
      #for ant_index,ant in enumerate(ant_list):
         #ant_name = 'ant%s' % ant
         Power_patter_ant_interp_dB_title = 'Antenna %s Power Pattern %s Pol' % (ant_name_randall,pol)
         Power_patter_ant_interp_dB_figname = 'Power_patter_Ant%s_%s_interp_dB.png' % (ant_name_randall,pol)
         power_pattern_ant_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_power_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)
         
         phase_pattern_ant_interp_title = 'Antenna %s Phase Pattern %s Pol' % (ant_name_randall,pol)
         phase_pattern_ant_interp_figname = 'phase_pattern_Ant%s_%s_interp_dB.png' % (ant_name_randall,pol)
         phase_pattern_ant_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_phase_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)

         ramp_pattern_ant_interp_title = 'Antenna %s Phase Ramp %s Pol' % (ant_name_randall,pol)
         ramp_pattern_ant_interp_figname = 'ramp_pattern_Ant%s_%s_interp.png' % (ant_name_randall,pol)
         ramp_pattern_ant_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_ramp_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)


         Ephi_phase_data_ant = Ephi_phase_data[ant_index]
         Ephi_mag_data_ant = Ephi_mag_data[ant_index]
         Etheta_phase_data_ant = Etheta_phase_data[ant_index]
         Etheta_mag_data_ant = Etheta_mag_data[ant_index]
         
         power_patter_ant = Etheta_mag_data_ant**2 + Ephi_mag_data_ant**2

         Ephi_real_ant = Ephi_mag_data_ant * np.cos(Ephi_phase_data_ant)
         Ephi_imag_ant = Ephi_mag_data_ant * np.sin(Ephi_phase_data_ant)
         Ephi_complex_ant = Ephi_real_ant+Ephi_imag_ant*1j
         Etheta_real_ant = Etheta_mag_data_ant * np.cos(Etheta_phase_data_ant)
         Etheta_imag_ant = Etheta_mag_data_ant * np.sin(Etheta_phase_data_ant)
         Etheta_complex_ant = Etheta_real_ant+Etheta_imag_ant*1j
      
         #For two antennas, the gains can be separated such that:
         # g1g2* (e_ant1)T (e_ant2)*
         #where g1 and g2 are the complex gain solutions and e_ant_1 and e_ant2 are the complex beam vectors with components in e_theta and e_phi
         #So it is this quantity: (e_ant1)T (e_ant2)* that affects the gain solutions, hence the gain solution phase will correct for variations in this
         #So we need to calculate (e_ant1)T (e_ant2)* and find the phase of it, call it the beam_gain
         
         beam_gain_complex = Etheta_complex_Ant002*Etheta_complex_ant.conjugate() + Ephi_complex_Ant002*Ephi_complex_ant.conjugate()
         #beam_gain_complex = Etheta_complex_ant*Etheta_complex_Ant002.conjugate() + Ephi_complex_ant*Ephi_complex_Ant002.conjugate()
                                                                               
         beam_gain_complex_phase_rad = np.angle(beam_gain_complex)
         
         
         phase_ramp_phi_theta = np.zeros([361,91])
         for phi in range(0,361):
            for theta in range(0,91):
               phi_rad = phi/180.*np.pi
               theta_rad = theta/180.*np.pi
               k_x = k_0 * np.cos(phi_rad)* np.sin(theta_rad)
               k_y = k_0 * np.sin(phi_rad)* np.sin(theta_rad)
               phase_delta = k_x * delta_x + k_y * delta_y
               while (phase_delta < -np.pi ):
                  phase_delta += 2*np.pi
               while (phase_delta > np.pi):
                  phase_delta -= 2*np.pi  
               phase_ramp_phi_theta[phi,theta] = phase_delta
               beam_gain_complex_phase_rad[phi,theta] += phase_delta 
               if (beam_gain_complex_phase_rad[phi,theta] >= np.pi):
                  beam_gain_complex_phase_rad[phi,theta] -= 2*np.pi
               if (beam_gain_complex_phase_rad[phi,theta] <= -np.pi):
                  beam_gain_complex_phase_rad[phi,theta] += 2*np.pi
                  
         ##remove phase ramp
         #for phi in range(0,361):
         #   for theta in range(0,91):
         #      phi_rad = phi/180.*np.pi
         #      theta_rad = theta/180.*np.pi
         #      x = np.cos(phi_rad)
         #      y = np.sin(phi_rad)
         #      phase_wrap_x = (2*np.pi/wavelength)*((ant_pos_x - ant002_pos_x)*x)
         #      phase_wrap_y = (2*np.pi/wavelength)*((ant_pos_y - ant002_pos_y)*y)
         #      phase_wrap = phase_wrap_x+phase_wrap_y
         #      beam_gain_complex_phase_rad[phi,theta]-=phase_wrap                               
         
         #remove phase wrap due to antenna position
         #phase_wrap = (2*np.pi/wavelength)*((ant_pos_x - ant002_pos_x)+(ant_pos_y - ant002_pos_y))
         #print phase_wrap
         #beam_gain_complex_phase_rad = beam_gain_complex_phase_rad - phase_wrap
         
         
         #print beam_gain_complex_phase_rad.shape
         #fix phase wrap (actually there is none - the problem must be with the interpolation
         #for az in range(0,361):
         #   for angle_index,angle in enumerate(beam_gain_complex_phase_rad[az,:]):
         #      if (angle < -np.pi):
         #         beam_gain_complex_phase_rad[az,angle_index] = beam_gain_complex_phase_rad[az,angle_index] + 2*np.pi
         #      if (angle > np.pi):
         #         beam_gain_complex_phase_rad[az,angle_index] = beam_gain_complex_phase_rad[az,angle_index] - 2*np.pi               

                                                   
         phase_pattern_deg = beam_gain_complex_phase_rad/np.pi*180.
         phase_ramp_phi_theta_deg = phase_ramp_phi_theta/np.pi*180.

      
         #normalise ALL ants with respect to the max of Ant001:
         if (ant_index)==0:
            max_ant001 = np.max(power_patter_ant)
            min_ant001 = np.min(power_patter_ant)
         
         power_patter_ant = power_patter_ant/max_ant001 
         
         
         np.save(power_pattern_ant_filename,power_patter_ant)
         print "saved %s" % power_pattern_ant_filename
         
         np.save(phase_pattern_ant_filename,beam_gain_complex_phase_rad)
         print "saved %s" % phase_pattern_ant_filename

         np.save(ramp_pattern_ant_filename,phase_ramp_phi_theta)
         print "saved %s" % ramp_pattern_ant_filename
                           
         power_patter_ant_log = 10*np.log10(power_patter_ant)
         
         # Define original polar grid
   
         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(power_patter_ant_log,0,1)
         
         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)
         
         # Interpolate polar grid to cartesian grid (nearest neighbor)
         
         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)
         
         
         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=3)
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         ###get east and west right
         ##cart_image = np.flip(cart_image,axis=0)
         ###sort out N-S (same as rotating 180
         ##cart_image = np.flip(cart_image,axis=1)
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
         
         max_ant001_db = 10*np.log10(max_ant001)
         min_ant001_db = 10*np.log10(min_ant001)
         
         img = ax.imshow(cart_image, interpolation='nearest', vmax=0,vmin=-25)
         #fig.savefig('test4.png')
         
         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Power dB', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(Power_patter_ant_interp_dB_title)
         plt.savefig(Power_patter_ant_interp_dB_figname)
         plt.close()

         #Phase
         # Define original polar grid

         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(phase_pattern_deg,0,1)

         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)

         # Interpolate polar grid to cartesian grid (nearest neighbor)

         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)


         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=0)
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         ###get east and west right
         ##cart_image = np.flip(cart_image,axis=0)
         ###sort out N-S (same as rotating 180
         ##cart_image = np.flip(cart_image,axis=1)
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
      
         img = ax.imshow(cart_image, interpolation='nearest',vmax=60,vmin=-60)
         #fig.savefig('test4.png')

         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Phase (deg)', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(phase_pattern_ant_interp_title)
         plt.savefig(phase_pattern_ant_interp_figname)
         plt.close()

         #Phase Ramp
         # Define original polar grid

         nr = 91
         nt = 361
         r = np.linspace(1, 91, nr)
         t = np.linspace(-np.pi, np.pi, nt)
         z = np.swapaxes(phase_ramp_phi_theta_deg,0,1)

         nx = 180
         ny = 180
         x = np.linspace(-90, 90., nx)
         y = np.linspace(-90., 90., ny)

         # Interpolate polar grid to cartesian grid (nearest neighbor)

         #blank out below horizon:
         centre_x = nx/2
         centre_y = ny/2
         #centre_x = 3
         #centre_y = 3
         y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
         mask = x**2+y**2 <= centre_x**2
         mask = 1*mask.astype(float)


         fig = plt.figure()
         ax = fig.add_subplot(111)
         cart_image = polar2cartesian(r, t, z, x, y, order=0)
         cart_image = cart_image*mask
         cart_image[cart_image==-0.] = np.nan
         ###get east and west right
         ##cart_image = np.flip(cart_image,axis=0)
         ###sort out N-S (same as rotating 180
         ##cart_image = np.flip(cart_image,axis=1)
         cart_image = np.rot90(cart_image, k=1, axes=(0,1))
      
         img = ax.imshow(cart_image, interpolation='nearest')
         #fig.savefig('test4.png')

         cbar = plt.colorbar(img, ax=ax)
         cbar.set_label('Phase (deg)', rotation=270, labelpad=10)
         #plt.colorbar(img, ax=ax)
         plt.title(ramp_pattern_ant_interp_title)
         plt.savefig(ramp_pattern_ant_interp_figname)
         plt.close()


#---------------------------------------------------
#TESTS
# Define original polar grid

nr = 10
nt = 20

r = np.linspace(1, 100, nr)
t = np.linspace(0., np.pi, nt)
z = np.random.random((nr, nt))

#print z.shape

# Define new cartesian grid

nx = 100
ny = 200

x = np.linspace(0., 100., nx)
y = np.linspace(-100., 100., ny)

# Interpolate polar grid to cartesian grid (nearest neighbor)

#fig = plt.figure()
#ax = fig.add_subplot(111)
#ax.imshow(polar2cartesian(r, t, z, x, y, order=0), interpolation='nearest')
#fig.savefig('test1.png')

# Interpolate polar grid to cartesian grid (cubic spline)

#fig = plt.figure()
#ax = fig.add_subplot(111)
#ax.imshow(polar2cartesian(r, t, z, x, y, order=3), interpolation='nearest')
#fig.savefig('test2.png')


##Open up one of Daniel's files and take a look:
#Xpol Ephi Mag:
Xpol_Ephi_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Ephi_mag_RW.fits"
Xpol_Ephi_mag_HDUlist = pyfits.open(Xpol_Ephi_mag_filename)
Xpol_Ephi_mag_header = Xpol_Ephi_mag_HDUlist[0].header
Xpol_Ephi_mag_HDUlist.verify('fix')
Xpol_Ephi_mag_data = Xpol_Ephi_mag_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Ephi_mag_data_ant13 = Xpol_Ephi_mag_data[0]

#Xpol Ephi Phase:
Xpol_Ephi_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Ephi_phase_RW.fits"
Xpol_Ephi_phase_HDUlist = pyfits.open(Xpol_Ephi_phase_filename)
Xpol_Ephi_phase_header = Xpol_Ephi_phase_HDUlist[0].header
#print Xpol_Ephi_phase_header
Xpol_Ephi_phase_HDUlist.verify('fix')
Xpol_Ephi_phase_data = Xpol_Ephi_phase_HDUlist[0].data
#print "Xpol_Ephi_phase_data: "
#print np.max(Xpol_Ephi_phase_data)
#print np.min(Xpol_Ephi_phase_data)

#print Xpol_Ephi_phase_data.shape
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
#print Xpol_Ephi_mag_header['outer_id']
#print Xpol_Ephi_mag_header['inner_id']
#print Xpol_Ephi_mag_header['aavs1_id']
#print Xpol_Ephi_mag_header['AAVS1_XC']
#print Xpol_Ephi_mag_header['AAVS1_YC']

#Plot antenna positions
antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests.png'
antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests'

#x_axis_theta = range(-91,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_spherical_coords_dB_s_to_n)
#plt.xlabel('X coord')
#plt.ylabel('Y coord')
#plt.savefig(antenna_position_plot_figname)



Xpol_Ephi_phase_data_ant13 = Xpol_Ephi_phase_data[0]

#Xpol Etheta Phase:
Xpol_Etheta_phase_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Etheta_phase_RW.fits"
Xpol_Etheta_phase_HDUlist = pyfits.open(Xpol_Etheta_phase_filename)
Xpol_Etheta_phase_header = Xpol_Etheta_phase_HDUlist[0].header
Xpol_Etheta_phase_HDUlist.verify('fix')
Xpol_Etheta_phase_data = Xpol_Etheta_phase_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Etheta_phase_data_ant13 = Xpol_Etheta_phase_data[0]

#Xpol Etheta Mag:
Xpol_Etheta_mag_filename = "/data/code/git/ben-astronomy/AAVS-1/AAVS-1_patters_RW/Xpol_Etheta_mag_RW.fits"
Xpol_Etheta_mag_HDUlist = pyfits.open(Xpol_Etheta_mag_filename)
Xpol_Etheta_mag_header = Xpol_Etheta_mag_HDUlist[0].header
Xpol_Etheta_mag_HDUlist.verify('fix')
Xpol_Etheta_mag_data = Xpol_Etheta_mag_HDUlist[0].data
#get the data for just one dipole
#print Xpol_Ephi_mag_header['id_sel']
Xpol_Etheta_mag_data_ant13 = Xpol_Etheta_mag_data[0]
#print Xpol_Etheta_mag_data_ant13.shape
Xpol_power_patter_ant13 = Xpol_Etheta_mag_data_ant13**2 + Xpol_Ephi_mag_data_ant13**2
Xpol_power_patter_ant13_log = 10*np.log10(Xpol_power_patter_ant13)



#P_pattern (dB) = 10*log10(abs(X_theta).^2 + abs(X_phi).^2)
#Where X_theta and X_phi are complex values taken directly from the .ffe file. The log10 represents a base 10 log not natural log a.k.a ln.

# Define original polar grid

nr = 91
nt = 361

r = np.linspace(1, 91, nr)
t = np.linspace(-np.pi, np.pi, nt)

#z = np.swapaxes(Xpol_Etheta_mag_data_ant13,0,1)

z = np.swapaxes(Xpol_power_patter_ant13_log,0,1)
#z = np.swapaxes( 10*np.log10(Xpol_Etheta_mag_data_ant13**2 + Xpol_Ephi_mag_data_ant13**2), 0 , 1)

#print z.shape

# Define new cartesian grid

nx = 180
ny = 180

x = np.linspace(-90, 90., nx)
y = np.linspace(-90., 90., ny)



# Interpolate polar grid to cartesian grid (nearest neighbor)

fig = plt.figure()
ax = fig.add_subplot(111)
cart_image = polar2cartesian(r, t, z, x, y, order=0)
#blank out below horizon:
centre_x = nx/2
centre_y = ny/2
#centre_x = 3
#centre_y = 3
y,x = np.ogrid[-centre_x:centre_x, -centre_y: centre_y]
mask = x**2+y**2 <= centre_x**2
mask = 1*mask.astype(float)


#cart_image = cart_image*mask
#cart_image[cart_image==-0.] = np.nan
#
#img = ax.imshow(cart_image, interpolation='nearest')
##fig.savefig('test3.png')
#plt.colorbar(img, ax=ax)
#plt.savefig('test3.png')

# Interpolate polar grid to cartesian grid (cubic spline)

fig = plt.figure()
ax = fig.add_subplot(111)
cart_image = polar2cartesian(r, t, z, x, y, order=3)
cart_image = cart_image*mask
cart_image[cart_image==-0.] = np.nan
###get east and west right
##cart_image = np.flip(cart_image,axis=0)
###sort out N-S (same as rotating 180
##cart_image = np.flip(cart_image,axis=1)
cart_image = np.rot90(cart_image, k=1, axes=(0,1))

#cart_image[90,0:50] = 0

img = ax.imshow(cart_image, interpolation='nearest')
#fig.savefig('test4.png')

cbar = plt.colorbar(img, ax=ax)
cbar.set_label('Power dB', rotation=270, labelpad=10)
#plt.colorbar(img, ax=ax)
plt.savefig('Power_patter_ant13_interp_dB.png')

#img = ax.pcolor(T,R,P) 
#plt.colorbar(img, ax=ax)
#plt.savefig(figname)

#Plot some profiles:

#profile from zenith to the west (probably the conventions of angles are all mixed up)
#Xpol_power_patter_ant13_zenith_to_east_spherical_coords = Xpol_power_patter_ant13[0,:]
#x_axis_theta = range(0,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (V/m)^2')
#plt.savefig('profile_zenith_to_east_linear.png')

Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB = 10*np.log10(Xpol_power_patter_ant13[0,:])
#x_axis_theta = range(0,91,1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (dB)')
#plt.savefig('profile_zenith_to_east_dB.png')

Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_e = 10*np.log10(Xpol_power_patter_ant13[0,:])
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_w = 10*np.log10(Xpol_power_patter_ant13[180,:])
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_z = np.flip(Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_w, axis=0)
Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_e = np.append(Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_z,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_z_to_e)

x_axis_theta = range(-91,91,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB_w_to_e)
plt.xlabel('Zenith angle - West to East')
plt.ylabel('Power (dB)')
plt.savefig('profile_west_to_east_dB.png')


#sin_proj

x_axis_theta_deg = np.arange(0,91,1)
x_axis_theta_rad = x_axis_theta_deg/180. * np.pi
x_axis_theta_sin = np.sin(x_axis_theta_rad)
fig = plt.figure()
img = plt.plot(x_axis_theta_sin,Xpol_power_patter_ant13_zenith_to_east_spherical_coords_dB)
plt.xlabel('Sin Zenith angle Sin(theta)')
plt.ylabel('Power (dB)')
plt.savefig('profile_zenith_to_east_dB_sin_proj.png')



##interpolated is rotated 180 deg 
#Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB = cart_image[0:90,90]
#x_axis_theta = range(90,0,-1)
#fig = plt.figure()
#img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB)
#plt.xlabel('Zenith angle')
#plt.ylabel('Power (dB)')
#plt.savefig('profile_zenith_to_east_dB_cart_interp.png')

Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB = cart_image[90,:]
x_axis_theta = range(-90,90,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_zenith_to_east_cartesian_coords_dB)
plt.xlabel('Zenith angle - West to East')
plt.ylabel('Power (dB)')
plt.savefig('profile_west_to_east_dB_cart_interp.png')

#S-N profiles:
Xpol_power_patter_ant13_spherical_coords_dB_z_to_n = 10*np.log10(Xpol_power_patter_ant13[90,:])
Xpol_power_patter_ant13_spherical_coords_dB_z_to_s = 10*np.log10(Xpol_power_patter_ant13[270,:])
Xpol_power_patter_ant13_spherical_coords_dB_s_to_z = np.flip(Xpol_power_patter_ant13_spherical_coords_dB_z_to_s, axis=0)
Xpol_power_patter_ant13_spherical_coords_dB_s_to_n = np.append(Xpol_power_patter_ant13_spherical_coords_dB_s_to_z,Xpol_power_patter_ant13_spherical_coords_dB_z_to_n)

x_axis_theta = range(-91,91,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_spherical_coords_dB_s_to_n)
plt.xlabel('Zenith angle - South to North')
plt.ylabel('Power (dB)')
plt.savefig('profile_south_to_north_dB.png')


Xpol_power_patter_ant13_south_to_north_cartesian_coords_dB = cart_image[:,90]
x_axis_theta = range(-90,90,1)
fig = plt.figure()
img = plt.plot(x_axis_theta,Xpol_power_patter_ant13_south_to_north_cartesian_coords_dB)
plt.xlabel('Zenith angle - South to North')
plt.ylabel('Power (dB)')
plt.savefig('profile_south_to_north_dB_cart_interp.png')


#amke new ant position files and plots


if make_new_position_files:
   
   ##Open up one of Daniel's files and take a look:
   #Xpol Ephi Phase:
   antenna_name_list = range(1,257)
   antenna_position_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/locations.txt"
   antenna_position_filename_randall = "/mnt/md0/AAVS-1/beam_pattern_tests/data/locations_randall.txt"
   
   
   #Daniels:
   antenna_position_x_list=[]
   antenna_position_y_list=[]
   with open(antenna_position_filename,'r') as f:
      lines = f.readlines()
   for line in lines:
      antenna_position_x = float(line.strip().split('\t')[1])
      antenna_position_y = float(line.strip().split('\t')[2])
      antenna_position_x_list.append(antenna_position_x)
      antenna_position_y_list.append(antenna_position_y)   
   
   antenna_position_x_m = np.asarray(antenna_position_x_list)
   antenna_position_y_m = np.asarray(antenna_position_y_list)
   
   
   #Plot antenna positions
   antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests_daniel.png'
   antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests Daniel'
   
   fig, ax = plt.subplots()
   ax.scatter(antenna_position_x_m,antenna_position_y_m, marker='.')
   
   for i, name in enumerate(antenna_name_list):
       ax.annotate(str(name), (antenna_position_x_m[i],antenna_position_y_m[i]),size=5)
       
   plt.xlabel('X offset from centre (m) ')
   plt.ylabel('Y offset from centre (m) ')
   plt.title(antenna_position_plot_title)
   plt.savefig(antenna_position_plot_figname,dpi = 300)
   
   #Randalls:
   antenna_position_x_list_randall=[]
   antenna_position_y_list_randall=[]
   antenna_names_list_randall=[]
   new_antenna_position_list=[]
   with open(antenna_position_filename_randall,'r') as f:
      lines = f.readlines()
   for line in lines:
      antenna_name_randall = line.strip().split('\t')[0]
      antenna_position_x_randall = float(line.strip().split('\t')[1])
      antenna_position_y_randall = float(line.strip().split('\t')[2])
      antenna_names_list_randall.append(antenna_name_randall)
      antenna_position_x_list_randall.append(antenna_position_x_randall)
      antenna_position_y_list_randall.append(antenna_position_y_randall)
         
   
   antenna_position_x_m_randall = np.asarray(antenna_position_x_list_randall)
   antenna_position_y_m_randall = np.asarray(antenna_position_y_list_randall)

   position_tolerance = 0.1
   for pos_index,x_pos_randall in enumerate(antenna_position_x_m_randall):
      y_pos_randall = antenna_position_y_m_randall[pos_index]
      antenna_name_randall = antenna_names_list_randall[pos_index]
      for x_pos_daniel_index,x_pos_daniel in enumerate(antenna_position_x_m):
         y_pos_daniel = antenna_position_y_m[x_pos_daniel_index]
         antenna_name_daniel = str(x_pos_daniel_index+1)
         x_diff = abs(x_pos_randall-x_pos_daniel)
         y_diff = abs(y_pos_randall-y_pos_daniel)
         if ((x_diff < position_tolerance) and (y_diff < position_tolerance)):
            new_position_line = "%s %s %s %s %s %s" % (antenna_name_randall,x_pos_randall,y_pos_randall,antenna_name_daniel,x_pos_daniel,y_pos_daniel)
            new_antenna_position_list.append(new_position_line)
   
   with open (new_antenna_position_list_filename, 'w') as outfile:
       outfile.write("\n".join(new_antenna_position_list))
   
   
   #Plot antenna positions
   antenna_position_plot_figname = 'antenna_positions_aavs1_beam_tests_randall.png'
   antenna_position_plot_title = 'Antenna Positions AAVS-1 Beam Tests Randall'
   
   fig, ax = plt.subplots()
   ax.scatter(antenna_position_x_m,antenna_position_y_m, marker='.')
   
   for i, name in enumerate(antenna_name_list):
       ax.annotate(str(name), (antenna_position_x_m[i],antenna_position_y_m[i]),size=5)
   
   plt.xlabel('X offset from centre (m) ')
   plt.ylabel('Y offset from centre (m) ')
   plt.title(antenna_position_plot_title)
   plt.savefig(antenna_position_plot_figname,dpi = 300)

#if make_amp_variation_plots:
#   ###############amplitude variation due to beam
#   
#   #Ref Antenna (ant002) is 116 in Daniel's numbering
#   #Choose 2 antennas to compare:
#   #outer: ant041 (Daniel 129) (randall pos (9.7005,-14.6269)) Daniel pos (9.697 , -14.654)
#   #inner: ant100 (Daniel 235) (randall pos (2.178,-0.6593)) (Daniel Pos (2.194, -0.649)
#   #
#   #position_offset_ant041_x_randall = 9.7005
#   #position_offset_ant041_y_randall = -14.6269
#   #position_offset_ant100_x_randall = 2.178
#   #position_offset_ant100_y_randall = -0.6593
#   #
#   #Sun alt,az (from Randall - not sure what date this is .... az is clockwise from North (not Daniel's phi which is anticlockwise from East)
#   #Think it is 05 April 2018 Sun 2 hr obs
#   #sun_az_elev_filename = "/mnt/md0/AAVS-1/beam_pattern_tests/data/sun_az_elev.txt"
#   
#   
#   sun_az_list=[]
#   sun_elev_list=[]
#   with open(sun_az_elev_filename,'r') as f:
#      lines = f.readlines()
#   for line in lines:
#      sun_az = float(line.strip().split()[0])
#      sun_elev = float(line.strip().split()[1])
#      sun_az_list.append(sun_az)
#      sun_elev_list.append(sun_elev)
#   
#   
#   
#   #No - do for whole sun track from randall
#   ##Pick the sun az,elev at 0400 UTC on 26 April 2018 (from print_src.py)
#   ##print_src.py --date="2018/04/26 04:00:00"
#   ##  Sun: ra =  2:13:20.23, dec =  13:24:02.4, az =   4.2038, el =  49.7369:  1e4 Jy - 1e8 Jy 
#   #sun_az_randall_deg = 4.2
#   #sun_alt_randall_deg = 49.7
#   #sun_phi_daniel_deg = 90. - sun_az_randall_deg
#   #sun_theta_daniel_deg = 90. - sun_alt_randall_deg
#   #sun_phi_daniel_rad = sun_phi_daniel_deg/180. * np.pi
#   #sun_theta_daniel_rad = sun_theta_daniel_deg/180. * np.pi
#   
#   #phase offset stuff: (need to work out how these phases relate to the individual componet Ephi and Etheta phases)
#   #k_x = k_0 * np.cos(sun_phi_daniel_rad)*np.sin(sun_theta_daniel_rad)
#   #k_y = k_0 * np.sin(sun_phi_daniel_rad)*np.sin(sun_theta_daniel_rad)
#   #residual_phase_ant_041_rad = position_offset_ant041_x * k_x + position_offset_ant041_y * k_y 
#   #residual_phase_ant_041_deg = residual_phase_ant_041_rad/np.pi * 180.
#   #
#   #print residual_phase_ant_041_rad
#   #print residual_phase_ant_041_deg
#   #I think only the phase changes, amplitude remains the same?
#   
#   #ant041:
#   #position_offset_ant041_x = position_offset_ant041_x_randall
#   #position_offset_ant041_y = position_offset_ant041_y_randall
#   
#   #read the new position file and make the amplitude variation plots
#   with open(new_antenna_position_list_filename,'r') as f:
#      lines = f.readlines()
#   for line in lines:
#      ant_name_randall = line.split()[0][3:6]
#      ant_name_daniel = line.split()[3]
#   
#      for pol in pol_list:
#         #Randal002 = Daniel116, Randal041 = Daniel129, Randal100 = Daniel235
#         print "Randall antenna name %s, Daniel antenna name %s" % (ant_name_randall,ant_name_daniel) 
#         ant002_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_Ant%s_%s_theta_phi.npy' % ('002',pol)
#         ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_Ant%s_%s_theta_phi.npy' % (ant_name_randall,pol)
#         #ant100_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_power_pattern_linear_ant235_%s_theta_phi.npy' % pol
#         ant002_pattern = np.load(ant002_pattern_filename)
#         ant_compare_pattern = np.load(ant_compare_pattern_filename)
#         #ant100_compare_pattern = np.load(ant100_compare_pattern_filename)
#         #normalise the beam patterns with respect to ant002 reference antenna
#         max_ant002 = np.max(ant002_pattern)
#         ant002_pattern_normalised = ant002_pattern/max_ant002
#         ant_compare_pattern_normalised = ant_compare_pattern/max_ant002
#         #ant100_compare_pattern_normalised = ant100_compare_pattern/max_ant002
#         amplitude_ratio_ant_compare_ant002_list=[]
#         #amplitude_ratio_ant100_ant002_list=[]
#         #
#         #print sun_elev_list[11]
#         sun_phi_daniel_deg_list = []
#         sun_theta_daniel_deg_list = []
#         for sun_az_randall_deg_index,sun_az_randall_deg in enumerate(sun_az_list):
#            sun_alt_randall_deg = sun_elev_list[sun_az_randall_deg_index]
#            sun_phi_daniel_deg = np.round(90. - sun_az_randall_deg)
#            if (sun_phi_daniel_deg < 0):
#               sun_phi_daniel_deg += 360.
#            sun_phi_daniel_deg=int(sun_phi_daniel_deg)
#            sun_theta_daniel_deg = int(np.round(90. - sun_alt_randall_deg))
#            sun_phi_daniel_deg_list.append(sun_theta_daniel_deg)
#            sun_theta_daniel_deg_list.append(sun_theta_daniel_deg)
#            #sun_phi_daniel_rad = sun_phi_daniel_deg/180. * np.pi
#            #sun_theta_daniel_rad = sun_theta_daniel_deg/180. * np.pi
#            #print sun_phi_daniel_deg
#            #print sun_theta_daniel_deg
#            #print ant041_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
#            beam_power_ant002_pos = ant002_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
#            beam_power_ant_compare_pos = ant_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
#            #beam_power_ant100_pos = ant100_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
#            amplitude_ratio_ant_compare_ant002 = beam_power_ant_compare_pos/beam_power_ant002_pos
#            #amplitude_ratio_ant100_ant002 = beam_power_ant100_pos/beam_power_ant002_pos
#            amplitude_ratio_ant_compare_ant002_list.append(amplitude_ratio_ant_compare_ant002)
#            #amplitude_ratio_ant100_ant002_list.append(amplitude_ratio_ant100_ant002)
#   
#         amplitude_ratio_ant_compare_ant002_array = np.asarray(amplitude_ratio_ant_compare_ant002_list)
#         #amplitude_ratio_ant100_ant002_array = np.asarray(amplitude_ratio_ant100_ant002_list)
#   
#         x  = range(len(sun_theta_daniel_deg_list))
#   
#         fig, ax = plt.subplots()
#         ax.plot(x,amplitude_ratio_ant_compare_ant002_array,label='ant%s/ant002' % ant_name_randall)
#         #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')
#   
#         power_ratio_title = 'Ratio of beam power pattern Ant%s (ref Ant002) at Sun position %s Pol' % (ant_name_randall,pol)
#         power_ratio_figname = 'ratio_power_patterns_Ant%s_ref_Ant002_%s_pol.png' % (ant_name_randall,pol)
#         plt.legend(loc=1)
#         plt.xlabel('Time (units of time) ')
#         plt.ylabel('Ratio of beam power pattern')
#         plt.title(power_ratio_title)
#         plt.savefig(power_ratio_figname)
#         plt.close()

if new_sun_pos_file:
   #Get the sun az,alt for 2018/05/09 time
   sun_amp_sols_time_list = []
   with open(sun_amp_sols_X_filename,'r') as f:
      lines=f.readlines()
   for line in lines[1:]:
      sun_amp_sols_time = line.split()[1]
      sun_amp_sols_time_list.append(sun_amp_sols_time)  
   
   formatter = DateFormatter('%H:%M') 
   datetimes = [datetime.datetime.strptime(t, "%H:%M:%S") for t in sun_amp_sols_time_list]
   
   
   sun_az_elev_az_alt_list = []
   for date_time in datetimes:
      date_time_string = date_time.strftime('%H:%M:%S')
      print_src_command = "print_src.py --date='%s %s'" % (date_string,date_time_string)
      output = subprocess.check_output(print_src_command, shell=True)
      sun_az = output.split('\n')[5].split()[9].split(',')[0]
      sun_alt = output.split('\n')[5].split()[12].split(':')[0]
      sun_az_alt_string = "%s   %s" % (sun_az,sun_alt)
      sun_az_elev_az_alt_list.append(sun_az_alt_string)
      
   with open (sun_az_elev_filename, 'w') as outfile:
      outfile.write("\n".join(sun_az_elev_az_alt_list)) 


if plot_cal_sols_only:      
   #Compare to actual amplitude solutions
   #Get the times
   sun_amp_sols_time_list = []
   with open(sun_amp_sols_X_filename,'r') as f:
      lines=f.readlines()
   for line in lines[1:]:
      sun_amp_sols_time = line.split()[1]
      sun_amp_sols_time_list.append(sun_amp_sols_time)  
   
   formatter = DateFormatter('%H:%M') 
   datetimes = [datetime.datetime.strptime(t, "%H:%M:%S") for t in sun_amp_sols_time_list]
   
   #get amps for antenna2 only (ref antenna)
   
   
   for ant_name_randall_number in range(1,257):
      ant_name_randall = "Ant%03d" % ant_name_randall_number
      print "finding gain sols for ant_name_randall: %s" % ant_name_randall
      sun_amp_sols_X_list = []
      sun_amp_sols_Y_list = []
      #AMP
      #X-pol
      with open(sun_amp_sols_X_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_amp_sols_X = line.split()[(ant_name_randall_number-1)+2]
         sun_amp_sols_X_list.append(sun_amp_sols_X)
         #sun_amp_sols_20180509_Y = line.split()[(ant_name_randall_number-1)*2-1+3]
         #sun_amp_sols_20180509_Y_list.append(sun_amp_sols_20180509_Y)
      #Y-pol
      with open(sun_amp_sols_Y_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_amp_sols_Y = line.split()[(ant_name_randall_number-1)+2]
         sun_amp_sols_Y_list.append(sun_amp_sols_Y)
      
      #PHASE   
      sun_ph_sols_X_list = []
      sun_ph_sols_Y_list = []
      #X pol
      with open(sun_ph_sols_X_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_ph_sols_X = line.split()[(ant_name_randall_number-1)+2]
         sun_ph_sols_X_list.append(sun_ph_sols_X)
         #sun_ph_sols_20180509_Y = line.split()[(ant_name_randall_number-1)*2+3]
         #sun_ph_sols_20180509_Y_list.append(sun_ph_sols_20180509_Y)
      #Y pol
      with open(sun_ph_sols_Y_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_ph_sols_Y = line.split()[(ant_name_randall_number-1)+2]
         sun_ph_sols_Y_list.append(sun_ph_sols_Y)   
      #select just the evens for Xpol sun_amp_sols_20180509_X_Y_list[start:stop:step]
      #print sun_amp_sols_20180509_time_list
      #print sun_ph_sols_20180509_X_list
      #print sun_amp_sols_20180509_Y_list
      
      fig, ax = plt.subplots()
      ax.plot(datetimes,sun_amp_sols_X_list,label='%s X Pol' % ant_name_randall)
      ax.xaxis.set_major_formatter(formatter)       
            
      title = 'Antenna Gain Amp for %s X Pol' % (ant_name_randall)
      figname = 'antenna_gain_amp_%s_X_pol.png' % (ant_name_randall)
      plt.legend(loc=1)
      plt.xlabel('Time ')
      plt.ylabel('Antenna Gain X Pol Amp')
      plt.title(title)
      fig.autofmt_xdate()
      plt.savefig(figname)
      plt.close()
   
      fig, ax = plt.subplots()
      ax.plot(datetimes,sun_amp_sols_Y_list,label='%s Y Pol' % ant_name_randall)
      ax.xaxis.set_major_formatter(formatter)   
            
      title = 'Antenna Gain Amp for %s Y Pol' % (ant_name_randall)
      figname = 'antenna_gain_amp_%s_Y_pol.png' % (ant_name_randall)
      plt.legend(loc=1)
      plt.xlabel('Time ')
      plt.ylabel('Antenna Gain Y Pol Amp')
      plt.title(title)
      fig.autofmt_xdate()
      plt.savefig(figname)
      plt.close()
   
      ################Phase
   
      fig, ax = plt.subplots()
      ax.plot(datetimes,sun_ph_sols_X_list,label='%s X Pol' % ant_name_randall)
      ax.xaxis.set_major_formatter(formatter)       
            
      title = 'Antenna Gain Phase for %s X Pol' % (ant_name_randall)
      figname = 'antenna_gain_phase_%s_X_pol.png' % (ant_name_randall)
      plt.legend(loc=1)
      plt.xlabel('Time ')
      plt.ylabel('Antenna Gain X Pol Phase')
      plt.title(title)
      fig.autofmt_xdate()
      plt.savefig(figname)
      plt.close()
   
      fig, ax = plt.subplots()
      ax.plot(datetimes,sun_ph_sols_Y_list,label='%s Y Pol' % ant_name_randall)
      ax.xaxis.set_major_formatter(formatter)   
            
      title = 'Antenna Gain Phase for %s Y Pol' % (ant_name_randall)
      figname = 'antenna_gain_phase_%s_Y_pol.png' % (ant_name_randall)
      plt.legend(loc=1)
      plt.xlabel('Time ')
      plt.ylabel('Antenna Gain Y Pol Phase')
      plt.title(title)
      fig.autofmt_xdate()
      plt.savefig(figname)
      plt.close()
       




if compare_sols_to_beam:
   sun_az_list=[]
   sun_elev_list=[]
   with open(sun_az_elev_filename,'r') as f:
      lines = f.readlines()
   for line in lines:
      sun_az = float(line.strip().split()[0])
      sun_elev = float(line.strip().split()[1])
      sun_az_list.append(sun_az)
      sun_elev_list.append(sun_elev)
   
   sun_amp_sols_time_list = []
   with open(sun_amp_sols_X_filename,'r') as f:
      lines=f.readlines()
   for line in lines[1:]:
      sun_amp_sols_time = line.split()[1]
      sun_amp_sols_time_list.append(sun_amp_sols_time)  
   
   formatter = DateFormatter('%H:%M') 
   datetimes = [datetime.datetime.strptime(t, "%H:%M:%S") for t in sun_amp_sols_time_list]
   
   ####################
   #GET THE AMPS for ANT2
   ant_name_randall_number = 2
   #Fill lists with amp and gain sols
   sun_amp_sols_Ant2_X_list = []
   sun_amp_sols_Ant2_Y_list = []
   #AMP
   #X-pol
   with open(sun_amp_sols_X_filename,'r') as f:
      lines=f.readlines()
   for line in lines[1:]:
      sun_amp_sols_X = line.split()[(ant_name_randall_number-1)+2]
      sun_amp_sols_Ant2_X_list.append(sun_amp_sols_X)
      #sun_amp_sols_20180509_Y = line.split()[(ant_name_randall_number-1)*2-1+3]
      #sun_amp_sols_20180509_Y_list.append(sun_amp_sols_20180509_Y)
   #Y-pol
   with open(sun_amp_sols_Y_filename,'r') as f:
      lines=f.readlines()
   for line in lines[1:]:
      sun_amp_sols_Y = line.split()[(ant_name_randall_number-1)+2]
      sun_amp_sols_Ant2_Y_list.append(sun_amp_sols_Y)
   ##########################################

   #read the new position file and make the amplitude variation plots
   #with open(new_antenna_position_list_filename,'r') as f:
   #   lines = f.readlines()
   #for line in lines:
   for ant_index in range(1,257):
      #ant_name_randall = line.split()[0][3:6]
      ant_name_randall = "%03d" % ant_index
      #ant_name_randall = line.split()[0][3:6]
      #ant_name_daniel = line.split()[3]
      ant_name_randall_number = int(ant_name_randall)
      print "finding gain sols for ant_name_randall: %s" % ant_name_randall
      
      #Fill lists with amp and gain sols
      sun_amp_sols_X_list = []
      sun_amp_sols_Y_list = []
      #AMP
      #X-pol
      with open(sun_amp_sols_X_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_amp_sols_X = line.split()[(ant_name_randall_number-1)+2]
         sun_amp_sols_X_list.append(float(sun_amp_sols_X))
         #sun_amp_sols_20180509_Y = line.split()[(ant_name_randall_number-1)*2-1+3]
         #sun_amp_sols_20180509_Y_list.append(sun_amp_sols_20180509_Y)
      #Y-pol
      with open(sun_amp_sols_Y_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_amp_sols_Y = line.split()[(ant_name_randall_number-1)+2]
         sun_amp_sols_Y_list.append(float(sun_amp_sols_Y))
      
      #PHASE   
      sun_ph_sols_X_list = []
      sun_ph_sols_Y_list = []
      #X pol
      with open(sun_ph_sols_X_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_ph_sols_X = line.split()[(ant_name_randall_number-1)+2]
         sun_ph_sols_X_list.append(float(sun_ph_sols_X))
         #sun_ph_sols_20180509_Y = line.split()[(ant_name_randall_number-1)*2+3]
         #sun_ph_sols_20180509_Y_list.append(sun_ph_sols_20180509_Y)
      #Y pol
      with open(sun_ph_sols_Y_filename,'r') as f:
         lines=f.readlines()
      for line in lines[1:]:
         sun_ph_sols_Y = line.split()[(ant_name_randall_number-1)+2]
         sun_ph_sols_Y_list.append(float(sun_ph_sols_Y)) 
      ##################
      
      sun_amp_sols_X_array = np.asarray(sun_amp_sols_X_list).astype(np.float)
      sun_amp_sols_Y_array = np.asarray(sun_amp_sols_Y_list).astype(np.float)
      sun_amp_sols_Ant2_X_array = np.asarray(sun_amp_sols_Ant2_X_list).astype(np.float)
      sun_amp_sols_Ant2_Y_array = np.asarray(sun_amp_sols_Ant2_Y_list).astype(np.float)
      
      
      max_ant2_X = np.amax(sun_amp_sols_Ant2_X_array)
      max_ant2_Y = np.amax(sun_amp_sols_Ant2_Y_array)
   
      #Normalise amps by dividing by the max amp of Ant2
      #Quantisation bad for X pol - normalise by Ypol max 
      #sun_amp_sols_X_array_norm = sun_amp_sols_X_array/max_ant2_X
      sun_amp_sols_X_array_norm = sun_amp_sols_X_array/max_ant2_Y
      sun_amp_sols_Y_array_norm = sun_amp_sols_Y_array/max_ant2_Y
      
      for pol in pol_list:
         #cal sols
         if pol=='X':
            sun_amp_sols_list = sun_amp_sols_X_array_norm
            sun_ph_sols_list = sun_ph_sols_X_list
         else:
            sun_amp_sols_list = sun_amp_sols_Y_array_norm
            sun_ph_sols_list = sun_ph_sols_Y_list
         
         #Randal002 = Daniel116, Randal041 = Daniel129, Randal100 = Daniel235
         #print "Randall antenna name %s, Daniel antenna name %s" % (ant_name_randall,ant_name_daniel) 
         ant002_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_power_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),'002',pol)
         #ant002_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_voltage_pattern_linear_Ant%s_%s_theta_phi.npy' % ('002',pol)
         ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_power_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)
         EDA_ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/EDA_power_pattern_linear_Ant%s_%s_%sMHz_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol,int(freq_MHz))
         print "comparing %s" % ant_compare_pattern_filename
         #phase_ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_phase_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)
         #print "comparing %s" % phase_ant_compare_pattern_filename
         phase_pattern_ant_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/AAVS1_phase_pattern_linear_Ant%s_%s_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol)
         EDA_phase_pattern_ant_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/new_data/%s_MHz/EDA_phase_pattern_linear_Ant%s_%s_%sMHz_theta_phi.npy' % (int(freq_MHz),ant_name_randall,pol,int(freq_MHz))
         print "comparing %s" % phase_pattern_ant_filename
         #ant_compare_pattern_filename = '/mnt/md0/AAVS-1/beam_pattern_tests/data/AAVS1_voltage_pattern_linear_Ant%s_%s_theta_phi.npy' % (ant_name_randall,pol)
         ant002_pattern = np.load(ant002_pattern_filename) 
         ant_compare_pattern = np.load(ant_compare_pattern_filename)
         phase_compare_pattern = np.load(phase_pattern_ant_filename)
         if ant_name_randall != '063':
            EDA_ant_compare_pattern = np.load(EDA_ant_compare_pattern_filename)
            EDA_phase_compare_pattern = np.load(EDA_phase_pattern_ant_filename)
         else:
            EDA_ant_compare_pattern = ant_compare_pattern*0.+0.5
            EDA_phase_compare_pattern = phase_compare_pattern*0.+0.5
         #Do this later - just for cut across beam by sun? - No
         #normalise the beam patterns with respect to ant002 reference antenna
         max_ant002 = np.max(ant002_pattern)         

         ant002_pattern_normalised = ant002_pattern/max_ant002
         ant_compare_pattern_normalised = ant_compare_pattern/max_ant002
         
         #amplitude_ratio_ant100_ant002_list=[]
         #
         #print sun_elev_list[11]
         amplitude_ant_compare_list=[]
         EDA_amplitude_ant_compare_list=[]
         amplitude_ant2_list=[]
         phase_ant_compare_list=[]
         EDA_phase_ant_compare_list=[]
         sun_phi_daniel_deg_list = []
         sun_theta_daniel_deg_list = []
         for sun_az_randall_deg_index,sun_az_randall_deg in enumerate(sun_az_list):
            sun_alt_randall_deg = sun_elev_list[sun_az_randall_deg_index]
            sun_phi_daniel_deg = np.round(90. - sun_az_randall_deg)
            if (sun_phi_daniel_deg < 0):
               sun_phi_daniel_deg += 360.
            sun_phi_daniel_deg=int(sun_phi_daniel_deg)
            sun_theta_daniel_deg = int(np.round(90. - sun_alt_randall_deg))
            #sun_phi_daniel_deg_list.append(sun_theta_daniel_deg)
            sun_phi_daniel_deg_list.append(sun_phi_daniel_deg)
            sun_theta_daniel_deg_list.append(sun_theta_daniel_deg)

            beam_power_ant_compare_pos = ant_compare_pattern_normalised[sun_phi_daniel_deg,sun_theta_daniel_deg]
            amplitude_ant_compare_list.append(beam_power_ant_compare_pos)
            EDA_beam_power_ant_compare_pos = EDA_ant_compare_pattern[sun_phi_daniel_deg,sun_theta_daniel_deg]
            EDA_amplitude_ant_compare_list.append(EDA_beam_power_ant_compare_pos)
            #amplitude_ant2_list.append(beam_power_ant2_pos)
            #amplitude_ratio_ant100_ant002_list.append(amplitude_ratio_ant100_ant002)
            phase_ant_compare_pos = phase_compare_pattern[sun_phi_daniel_deg,sun_theta_daniel_deg]
            phase_ant_compare_list.append(phase_ant_compare_pos) 
            EDA_phase_ant_compare_pos = EDA_phase_compare_pattern[sun_phi_daniel_deg,sun_theta_daniel_deg]
            EDA_phase_ant_compare_list.append(EDA_phase_ant_compare_pos)
         amplitude_ant_compare_array = np.asarray(amplitude_ant_compare_list).astype(np.float)
         phase_ant_compare_array = np.asarray(phase_ant_compare_list).astype(np.float)
         phase_ant_compare_array_deg = phase_ant_compare_array/np.pi*180.
         EDA_amplitude_ant_compare_array = np.asarray(EDA_amplitude_ant_compare_list).astype(np.float)
         EDA_phase_ant_compare_array = np.asarray(EDA_phase_ant_compare_list).astype(np.float)
         EDA_phase_ant_compare_array_deg = EDA_phase_ant_compare_array/np.pi*180.
      
         #normalise both curves to be between 0-1
         
         #amplitude_ant_compare_array = amplitude_ant_compare_array - np.min(amplitude_ant_compare_array)
         amplitude_ant_compare_array = amplitude_ant_compare_array/np.max(amplitude_ant_compare_array)
         EDA_amplitude_ant_compare_array = EDA_amplitude_ant_compare_array/np.max(EDA_amplitude_ant_compare_array)
         #sun_amp_sols_list = sun_amp_sols_list - np.min(sun_amp_sols_list)
         sun_amp_sols_list = sun_amp_sols_list/np.max(sun_amp_sols_list)
         
         #subtract away the mean from the phase sols
         sun_ph_sols_list = np.asarray(sun_ph_sols_list).astype(np.float)
         sun_ph_sols_list = sun_ph_sols_list - np.mean(sun_ph_sols_list)
      
         #AAVS1
         #amp
         #print datetimes
         #print amplitude_ant_compare_array
         fig, ax = plt.subplots()
         ax.plot(datetimes,amplitude_ant_compare_array,label='ant%s beam /max(ant002 beam)' % ant_name_randall)
         ax.plot(datetimes,sun_amp_sols_list,label='ant%s sol /max(ant002 sol) X Pol' % ant_name_randall)
         ax.xaxis.set_major_formatter(formatter)  
         ax.set_ylim(-0.1,1.2)
         #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')
   
         power_title = 'Beam power Ant%s at Sun position \n and cal sol amp %s Pol %s MHz' % (ant_name_randall,pol,int(freq_MHz))
         power_figname = 'compare_beam_amp_to_cal_sols_Ant%s_%s_pol_%s_MHz.jpg' % (ant_name_randall,pol,int(freq_MHz))
         plt.legend(loc=1)
         plt.xlabel('Time HH:MM ')
         plt.ylabel('Power/amplitude normalised to Ant2')
         plt.title(power_title)
         plt.savefig(power_figname)
         plt.close()         
         print "saved %s" % (power_figname)

         #phase
         fig, ax = plt.subplots()
         ax.plot(datetimes,phase_ant_compare_array_deg,label='ant%s beam model phase ref Ant002' % ant_name_randall)
         ax.plot(datetimes,sun_ph_sols_list,label='ant%s sol phase X Pol' % ant_name_randall)
         ax.xaxis.set_major_formatter(formatter)
         ax.set_ylim(-60,60)
         #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')

         power_title = 'Beam Phase Ant%s at Sun position \n and cal sol phase %s Pol %s MHz ref Ant002' % (ant_name_randall,pol,int(freq_MHz))
         power_figname = 'compare_beam_phase_to_cal_sols_Ant%s_%s_pol_%s_MHz.jpg' % (ant_name_randall,pol,int(freq_MHz))
         plt.legend(loc=1)
         plt.xlabel('Time HH:MM ')
         plt.ylabel('Phase (deg)')
         plt.title(power_title)
         plt.savefig(power_figname)
         plt.close()
         print "saved %s" % (power_figname)

         #EDA
         #amp
         #print datetimes
         #print amplitude_ant_compare_array
         fig, ax = plt.subplots()
         ax.plot(datetimes,EDA_amplitude_ant_compare_array,label='ant%s beam' % ant_name_randall)
         #ax.plot(datetimes,sun_amp_sols_list,label='ant%s sol X Pol' % ant_name_randall)
         ax.xaxis.set_major_formatter(formatter)
         ax.set_ylim(-0.1,1.2)
         #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')

         power_title = 'EDA Beam power Ant%s at Sun position \n and cal sol amp %s Pol %s MHz' % (ant_name_randall,pol,int(freq_MHz))
         power_figname = 'EDA_compare_beam_amp_to_cal_sols_Ant%s_%s_pol_%s_MHz.jpg' % (ant_name_randall,pol,int(freq_MHz))
         plt.legend(loc=1)
         plt.xlabel('Time HH:MM ')
         plt.ylabel('Power/amplitude ')
         plt.title(power_title)
         plt.savefig(power_figname)
         plt.close()
         print "saved %s" % (power_figname)

         #phase
         fig, ax = plt.subplots()
         ax.plot(datetimes,EDA_phase_ant_compare_array_deg,label='ant%s beam model phase ref Ant002' % ant_name_randall)
         #ax.plot(datetimes,sun_ph_sols_list,label='ant%s sol phase X Pol' % ant_name_randall)
         ax.xaxis.set_major_formatter(formatter)
         ax.set_ylim(-60,60)
         #ax.plot(x,amplitude_ratio_ant100_ant002_array,label='ant100/ant002')

         power_title = 'EDA Beam Phase Ant%s at Sun position \n and cal sol phase %s Pol %s MHz ref Ant002' % (ant_name_randall,pol,int(freq_MHz))
         power_figname = 'EDA_compare_beam_phase_to_cal_sols_Ant%s_%s_pol_%s_MHz.jpg' % (ant_name_randall,pol,int(freq_MHz))
         plt.legend(loc=1)
         plt.xlabel('Time HH:MM ')
         plt.ylabel('Phase (deg)')
         plt.title(power_title)
         plt.savefig(power_figname)
         plt.close()
         print "saved %s" % (power_figname)

if combine_to_pdf:
   if pdf_compare_beam_amp:
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls compare*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_amp_to_cal_sols_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      #Ypol
      pol='Y'
      output = subprocess.check_output('ls compare*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_amp_to_cal_sols_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_compare_beam_phase:
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls compare*phase*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_phase_to_cal_sols_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      #Ypol
      pol='Y'
      output = subprocess.check_output('ls compare*phase*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_phase_to_cal_sols_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_compare_beam_amp_EDA:
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls EDA_compare*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_amp_to_cal_sols_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      #Ypol
      pol='Y'
      output = subprocess.check_output('ls EDA_compare*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_amp_to_cal_sols_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_compare_beam_phase_EDA:
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls EDA_compare*phase*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_phase_to_cal_sols_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      #Ypol
      pol='Y'
      output = subprocess.check_output('ls EDA_compare*phase*%s*.jpg'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='compare_beam_phase_to_cal_sols_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_beam_maps_AAVS1_amp:                 
      #beam power patterns
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls Power_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_power_patterns_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)      
      pol='Y'
      output = subprocess.check_output('ls Power_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_power_patterns_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)  
   if pdf_beam_maps_AAVS1_phase:
      #beam phase patterns
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls phase_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_phase_patterns_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      pol='Y'
      output = subprocess.check_output('ls phase_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_phase_patterns_AAVS-1_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_beam_maps_EDA_amp:
      #beam power patterns
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls EDA_Power_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_power_patterns_EDA%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      pol='Y'
      output = subprocess.check_output('ls EDA_Power_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_power_patterns_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
   if pdf_beam_maps_EDA_phase:
      #beam phase patterns
      #Xpol:
      pol='X'
      output = subprocess.check_output('ls EDA_phase_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_phase_patterns_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)
      pol='Y'
      output = subprocess.check_output('ls EDA_phase_*%s*.png'%pol, shell=True)
      image_list = output.split('\n')
      combined_figname='antenna_phase_patterns_EDA_%s_pol_%sMHz.pdf' % (pol,int(freq_MHz))
      combine_images_to_pdf(image_list,pol,combined_figname)


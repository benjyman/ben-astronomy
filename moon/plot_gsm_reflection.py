#Plot the data generated by gsm_reflection.py and fit a power law to the temps

import numpy as np
#fix problem with plotting without X11:
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
from scipy import optimize

date_time_string="2015_09_26_16_55_28"

#load the data
temp_data_filename="disk_av_temp_array_%s.npy" % date_time_string
freq_points_filename="freq_array_%s.npy" % date_time_string

#freq_array=np.load(freq_points_filename)
#freq array didnt get saved for some reason...
freq_array=np.arange(70,235,5)

temp_data=np.load(temp_data_filename)

temp_error=0.1*temp_data



#fit line

# Power-law fitting is best done by first converting
# to a linear equation and then fitting to a straight line.
# Note that the `logyerr` term here is ignoring a constant prefactor.
#
#  y = a * x^b
#  log(y) = log(a) + b*log(x)
#

#We want the amplitude to be the amp at 150 MHz so use
#logx = np.log10(freq_array)
logx=np.log10(freq_array/150.0)
logy = np.log10(temp_data)
logyerr = temp_error / temp_data

powerlaw = lambda x, amp, index: amp * (x**index)

# define our (line) fitting function
fitfunc = lambda p, x: p[0] + p[1] * x
errfunc = lambda p, x, y, err: (y - fitfunc(p, x)) / err

pinit = [1.0, -1.0]
out = optimize.leastsq(errfunc, pinit,
                       args=(logx, logy, logyerr), full_output=1)

pfinal = out[0]
covar = out[1]
print pfinal
print covar

index = pfinal[1]
amp = 10.0**pfinal[0]


indexErr = np.sqrt( covar[1][1] )
ampErr = np.sqrt( covar[0][0] ) * amp


#plot
#plt.clf()
#plot_filename="T_av_reflected_Moon_%s.png" % (date_time_string)
#temp_plot=plt.figure(1)
##plt.errorbar(freq_array,Smoon_average_stddev_spectrum[:,0],yerr=Smoon_average_stddev_spectrum[:,1])
#plt.plot(freq_array,temp_data)
#plt.title('Disk average Moon Temp vs frequency for MWA')
#plt.ylabel('Disk Avergaged Moon Temp (K)')
#plt.xlabel('Frequency (MHz)')
#temp_plot.savefig(plot_filename)

plt.clf()
plot_filename="best_fit_powerlaw_reflection_%s.png" % date_time_string
fit_plot=plt.figure(1)
plt.subplot(2, 1, 1)
plt.plot(freq_array, powerlaw(freq_array/150.0, amp, index))     # Fit
plt.errorbar(freq_array, temp_data, yerr=temp_error, fmt='k.')  # Data
plt.text(150, 100, 'Temp_150MHz = %5.2f +/- %5.2f' % (amp, ampErr))
plt.text(150, 80, 'Index = %5.2f +/- %5.2f' % (index, indexErr))
plt.title('Best Fit Power Law Moon Reflection')
plt.xlabel('Frequency (MHz)')
plt.ylabel('Disk-Averaged Reflected Moon Temp (K)')
plt.xlim(70, 240)

plt.subplot(2, 1, 2)
plt.loglog(freq_array, powerlaw(freq_array/150.0, amp, index))
plt.errorbar(freq_array, temp_data, yerr=temp_error, fmt='k.')  # Data
plt.xlabel('Frequency (log scale)')
plt.ylabel('Temp (log scale)')
plt.xlim(70, 240)

fit_plot.savefig(plot_filename)


#plot maps

